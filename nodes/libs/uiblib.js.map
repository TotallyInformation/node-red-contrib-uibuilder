{
  "version": 3,
  "sources": ["src/libs/uiblib.js"],
  "sourcesContent": ["/* eslint-disable max-params */\n/* eslint-env node es2017 */\n/**\n * Utility library for uibuilder\n *\n * Copyright (c) 2017-2023 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\n'use strict'\n\n/** --- Type Defs ---\n * @typedef {import('../../typedefs.js').MsgAuth} MsgAuth\n * @typedef {import('../../typedefs.js').uibNode} uibNode\n * @typedef {import('../../typedefs.js').runtimeRED} runtimeRED\n * typedef {import('../typedefs.js')}\n * @typedef {import('node-red')} Red\n * @typedef {import('Express')} Express\n * typedef {import('socket.io').Namespace} socketio.Namespace\n * typedef {import('socket.io').Socket} socketio.Socket\n */\n\nconst path = require('path')\nconst fs = require('fs-extra')\n// const tilib = require('./tilib')\nconst { nanoid } = require('nanoid')\n// NOTE: Don't add socket.js here otherwise it will stop working because it references this module\n\nmodule.exports = {\n\n    /** Do any complex, custom node closure code here\n     * @param {uibNode} node Reference to the node instance object\n     * @param {object} uib Reference to the uibuilder master config object\n     * @param {object} sockets - Instance of Socket.IO handler singleton\n     * @param {object} web - Instance of ExpressJS handler singleton\n     * @param {Function|null} done Default=null, internal node-red function to indicate processing is complete\n     */\n    instanceClose: function(node, uib, sockets, web, done = null) {\n\n        // const RED = /** @type {runtimeRED} */ uib.RED\n        const log = uib.RED.log\n\n        log.trace(`[uibuilder:uiblib:instanceClose:${node.url}] Running instance close.`)\n\n        /** @type {object} instances[] Reference to the currently defined instances of uibuilder */\n        const instances = uib.instances\n\n        try { // Wrap this in a try to make sure that everything is working\n\n            // Remove url folder if requested\n            if ( uib.deleteOnDelete[node.url] === true ) {\n                log.trace(`[uibuilder:uiblib:instanceClose] Deleting instance folder. URL: ${node.url}`)\n\n                // Remove the flag in case someone recreates the same url!\n                delete uib.deleteOnDelete[node.url]\n\n                //! TODO: Replace fs-extra\n                // fsPromises.rm(path, {force:true,recursive:true}), fs.rm(path, {force:true,recursive:true}), callback(err))\n                fs.remove(path.join(uib.rootFolder, node.url))\n                    .catch(err => {\n                        log.error(`[uibuilder:uiblib:processClose] Deleting instance folder failed. URL=${node.url}, Error: ${err.message}`)\n                    })\n            }\n\n            // Keep a log of the active instances @since 2019-02-02\n            delete instances[node.id] // = undefined\n\n            node.statusDisplay.text = 'CLOSED'\n            this.setNodeStatus(node)\n\n            // Let all the clients know we are closing down\n            sockets.sendToFe({ 'uibuilderCtrl': 'shutdown' }, node.url, uib.ioChannels.control)\n\n            // Disconnect all Socket.IO clients for this node instance\n            sockets.removeNS(node)\n\n        } catch (err) {\n            log.error(`[uibuilder:uiblib:instanceClose] Error in closure. Error: ${err.message}`, err)\n        }\n\n        /*\n            // This code borrowed from the http nodes\n            // THIS DOESN'T ACTUALLY WORK!!! Static routes don't set route.route\n            app._router.stack.forEach(function(route,i,routes) {\n                if ( route.route && route.route.path === node.url ) {\n                    routes.splice(i,1)\n                }\n            });\n        */\n\n        // This should be executed last if present. `done` is the data returned from the 'close'\n        // event and is used to resolve async callbacks to allow Node-RED to close\n        if (done) done()\n    }, // ---- End of processClose function ---- //\n\n    /**  Get property values from an Object.\n     * Can list multiple properties, the first found (or the default return) will be returned\n     * Makes use of RED.util.getMessageProperty\n     * @param {object} RED - RED\n     * @param {object} myObj - the parent object to search for the props\n     * @param {string|string[]} props - one or a list of property names to retrieve.\n     *                               Can be nested, e.g. 'prop1.prop1a'\n     *                               Stops searching when the first property is found\n     * @param {any} defaultAnswer - if the prop can't be found, this is returned\n     * @returns {any} The first found property value or the default answer\n     */\n    getProps: function(RED, myObj, props, defaultAnswer = []) {\n        if ( (typeof props) === 'string' ) {\n            // @ts-ignore\n            props = [props]\n        }\n        if ( !Array.isArray(props) ) {\n            return undefined\n        }\n        let ans\n        for (let i = 0; i < props.length; i++) {\n            try { // errors if an intermediate property doesn't exist\n                ans = RED.util.getMessageProperty(myObj, props[i])\n                if ( typeof ans !== 'undefined' ) {\n                    break\n                }\n            } catch (e) {\n                // do nothing\n            }\n        }\n        return ans || defaultAnswer\n    }, // ---- End of getProps ---- //\n\n    /** Simple fn to set a node status in the admin interface\n     * fill: red, green, yellow, blue or grey\n     * shape: ring, dot\n     * @param {object} node _\n     */\n    setNodeStatus: function( node ) {\n        node.status(node.statusDisplay)\n    }, // ---- End of setNodeStatus ---- //\n\n    /** Replace template in front-end instance folder\n     * @param {string} url The uib instance URL\n     * @param {string} template Name of one of the built-in templates including 'blank' and 'external'\n     * @param {string|undefined} extTemplate Optional external template name to be passed to degit. See degit options for details.\n     * @param {string} cmd 'replaceTemplate' if called from admin-router:POST, otherwise can be anything descriptive & unique by caller\n     * @param {object} templateConf Template configuration object\n     * @param {object} uib uibuilder's master variables\n     * @param {object} log uibuilder's Log functions (normally points to RED.log)\n     * @returns {Promise} {statusMessage, status, (json)}\n     */\n    replaceTemplate: async function(url, template, extTemplate, cmd, templateConf, uib, log) {\n        const res = {\n            'statusMessage': 'Something went wrong!',\n            'status': 500,\n            'json': undefined,\n        }\n\n        // Load a new template (params url, template, extTemplate)\n        if ( template === 'external' && ( (!extTemplate) || extTemplate.length === 0) ) {\n            const statusMsg = `External template selected but no template name provided. template=external, url=${url}, cmd=${cmd}`\n            log.error(`[uibuilder:uiblib:replaceTemplate]. ${statusMsg}`)\n            res.statusMessage = statusMsg\n            res.status = 500\n            return res\n        }\n\n        const fullname = path.join(uib.rootFolder, url)\n\n        if ( extTemplate ) extTemplate = extTemplate.trim()\n        if ( extTemplate === undefined ) throw new Error('extTemplate is undefined')\n\n        // If template=\"external\" & extTemplate not blank - use degit to load\n        if ( template === 'external' ) {\n            const degit = require('degit')\n\n            uib.degitEmitter = degit(extTemplate, {\n                cache: false,  // Fix for Issue #155 part 3 - degit error\n                force: true,\n                verbose: false,\n            })\n\n            uib.degitEmitter.on('info', info => {\n                log.trace(`[uibuilder:uiblib:replaceTemplate] Degit: '${extTemplate}' to '${fullname}': ${info.message}`)\n            })\n\n            await uib.degitEmitter.clone(fullname)\n\n            // console.log({myclone})\n            const statusMsg = `Degit successfully copied template '${extTemplate}' to '${fullname}'.`\n            log.info(`[uibuilder:uiblib:replaceTemplate] ${statusMsg} cmd=${cmd}`)\n            res.statusMessage = statusMsg\n            res.status = 200\n\n            res.json = /** @type {*} */ ({\n                'url': url,\n                'template': template,\n                'extTemplate': extTemplate,\n                'cmd': cmd,\n            })\n            return res\n\n        } else if ( Object.prototype.hasOwnProperty.call(templateConf, template) ) {\n\n            // Otherwise, use internal template\n            const fsOpts = { 'overwrite': true, 'preserveTimestamps': true }\n            const srcTemplate = path.join( uib.masterTemplateFolder, template )\n            try {\n                //! TODO: Replace fs-extra - https://github.com/jprichardson/node-fs-extra/blob/HEAD/docs/copy-sync.md\n                //! Must copy full folder - need to wait till node v16.7 - fs.cp/fs.cpSync\n                fs.copySync( srcTemplate, fullname, fsOpts )\n                const statusMsg = `Successfully copied template ${template} to ${url}.`\n                log.info(`[uibuilder:uiblib:replaceTemplate] ${statusMsg} cmd=replaceTemplate`)\n                res.statusMessage = statusMsg\n                res.status = 200\n                res.json = /** @type {*} */ ({\n                    'url': url,\n                    'template': template,\n                    'extTemplate': extTemplate,\n                    'cmd': cmd,\n                })\n                return res\n            } catch (err) {\n                const statusMsg = `Failed to copy template from '${srcTemplate}' to '${fullname}'. url=${url}, cmd=${cmd}, ERR=${err.message}.`\n                log.error(`[uibuilder:uiblib:replaceTemplate] ${statusMsg}`, err)\n                res.statusMessage = statusMsg\n                res.status = 500\n                return res\n            }\n\n        } else {\n\n            // Shouldn't ever be able to occur - but still :-)\n            const statusMsg = `Template '${template}' does not exist. url=${url}, cmd=${cmd}.`\n            log.error(`[uibuilder:uiblib:replaceTemplate] ${statusMsg}`)\n            res.statusMessage = statusMsg\n            res.status = 500\n            return res\n        }\n\n    }, // ----- End of replaceTemplate() ----- //\n\n    /** Get the client id from req headers cookie string OR, create a new one and return that\n     * @param {*} req ExpressJS request object\n     * @returns {string} The clientID\n     */\n    getClientId: function getClientId(req) {\n        let clientId\n        if ( req.headers.cookie ) {\n            const matches = req.headers.cookie.match(/uibuilder-client-id=(?<id>.{21})/)\n            if ( !matches || !matches.groups.id ) clientId = nanoid()\n            else clientId = matches.groups.id\n        } else {\n            clientId = nanoid()\n        }\n        return clientId\n    }\n\n} // ---- End of module.exports ---- //\n\n// EOF\n"],
  "mappings": "aAiCA,MAAMA,EAAO,QAAQ,MAAM,EACrBC,EAAK,QAAQ,UAAU,EAEvB,CAAE,OAAAC,CAAO,EAAI,QAAQ,QAAQ,EAGnC,OAAO,QAAU,CASb,cAAe,SAASC,EAAMC,EAAKC,EAASC,EAAKC,EAAO,KAAM,CAG1D,MAAMC,EAAMJ,EAAI,IAAI,IAEpBI,EAAI,MAAM,mCAAmCL,EAAK,GAAG,2BAA2B,EAGhF,MAAMM,EAAYL,EAAI,UAEtB,GAAI,CAGA,GAAKA,EAAI,eAAeD,EAAK,GAAG,IAAM,GAAO,CACzCK,EAAI,MAAM,mEAAmEL,EAAK,GAAG,EAAE,EAGvF,OAAOC,EAAI,eAAeD,EAAK,GAAG,EAElC;AAEAF,EAAG,OAAOD,EAAK,KAAKI,EAAI,WAAYD,EAAK,GAAG,CAAC,EACxC,MAAMO,GAAO,CACVF,EAAI,MAAM,wEAAwEL,EAAK,GAAG,YAAYO,EAAI,OAAO,EAAE,CACvH,CAAC,CACT,CAGA,OAAOD,EAAUN,EAAK,EAAE,EAExBA,EAAK,cAAc,KAAO,SAC1B,KAAK,cAAcA,CAAI,EAGvBE,EAAQ,SAAS,CAAE,cAAiB,UAAW,EAAGF,EAAK,IAAKC,EAAI,WAAW,OAAO,EAGlFC,EAAQ,SAASF,CAAI,CAEzB,OAASO,EAAK,CACVF,EAAI,MAAM,6DAA6DE,EAAI,OAAO,GAAIA,CAAG,CAC7F,CAcIH,GAAMA,EAAK,CACnB,EAaA,SAAU,SAASI,EAAKC,EAAOC,EAAOC,EAAgB,CAAC,EAAG,CAKtD,GAJM,OAAOD,GAAW,WAEpBA,EAAQ,CAACA,CAAK,GAEb,CAAC,MAAM,QAAQA,CAAK,EACrB,OAEJ,IAAIE,EACJ,QAAS,EAAI,EAAG,EAAIF,EAAM,OAAQ,IAC9B,GAAI,CAEA,GADAE,EAAMJ,EAAI,KAAK,mBAAmBC,EAAOC,EAAM,CAAC,CAAC,EAC5C,OAAOE,EAAQ,IAChB,KAER,MAAY,CAEZ,CAEJ,OAAOA,GAAOD,CAClB,EAOA,cAAe,SAAUX,EAAO,CAC5BA,EAAK,OAAOA,EAAK,aAAa,CAClC,EAYA,gBAAiB,eAAea,EAAKC,EAAUC,EAAaC,EAAKC,EAAchB,EAAKI,EAAK,CACrF,MAAMa,EAAM,CACR,cAAiB,wBACjB,OAAU,IACV,KAAQ,MACZ,EAGA,GAAKJ,IAAa,aAAiB,CAACC,GAAgBA,EAAY,SAAW,GAAK,CAC5E,MAAMI,EAAY,oFAAoFN,CAAG,SAASG,CAAG,GACrH,OAAAX,EAAI,MAAM,uCAAuCc,CAAS,EAAE,EAC5DD,EAAI,cAAgBC,EACpBD,EAAI,OAAS,IACNA,CACX,CAEA,MAAME,EAAWvB,EAAK,KAAKI,EAAI,WAAYY,CAAG,EAG9C,GADKE,IAAcA,EAAcA,EAAY,KAAK,GAC7CA,IAAgB,OAAY,MAAM,IAAI,MAAM,0BAA0B,EAG3E,GAAKD,IAAa,WAAa,CAC3B,MAAMO,EAAQ,QAAQ,OAAO,EAE7BpB,EAAI,aAAeoB,EAAMN,EAAa,CAClC,MAAO,GACP,MAAO,GACP,QAAS,EACb,CAAC,EAEDd,EAAI,aAAa,GAAG,OAAQqB,GAAQ,CAChCjB,EAAI,MAAM,8CAA8CU,CAAW,SAASK,CAAQ,MAAME,EAAK,OAAO,EAAE,CAC5G,CAAC,EAED,MAAMrB,EAAI,aAAa,MAAMmB,CAAQ,EAGrC,MAAMD,EAAY,uCAAuCJ,CAAW,SAASK,CAAQ,KACrF,OAAAf,EAAI,KAAK,sCAAsCc,CAAS,QAAQH,CAAG,EAAE,EACrEE,EAAI,cAAgBC,EACpBD,EAAI,OAAS,IAEbA,EAAI,KAAyB,CACzB,IAAOL,EACP,SAAYC,EACZ,YAAeC,EACf,IAAOC,CACX,EACOE,CAEX,SAAY,OAAO,UAAU,eAAe,KAAKD,EAAcH,CAAQ,EAAI,CAGvE,MAAMS,EAAS,CAAE,UAAa,GAAM,mBAAsB,EAAK,EACzDC,EAAc3B,EAAK,KAAMI,EAAI,qBAAsBa,CAAS,EAClE,GAAI,CACA;AACA;AACAhB,EAAG,SAAU0B,EAAaJ,EAAUG,CAAO,EAC3C,MAAMJ,EAAY,gCAAgCL,CAAQ,OAAOD,CAAG,IACpE,OAAAR,EAAI,KAAK,sCAAsCc,CAAS,sBAAsB,EAC9ED,EAAI,cAAgBC,EACpBD,EAAI,OAAS,IACbA,EAAI,KAAyB,CACzB,IAAOL,EACP,SAAYC,EACZ,YAAeC,EACf,IAAOC,CACX,EACOE,CACX,OAASX,EAAK,CACV,MAAMY,EAAY,iCAAiCK,CAAW,SAASJ,CAAQ,UAAUP,CAAG,SAASG,CAAG,SAAST,EAAI,OAAO,IAC5H,OAAAF,EAAI,MAAM,sCAAsCc,CAAS,GAAIZ,CAAG,EAChEW,EAAI,cAAgBC,EACpBD,EAAI,OAAS,IACNA,CACX,CAEJ,KAAO,CAGH,MAAMC,EAAY,aAAaL,CAAQ,yBAAyBD,CAAG,SAASG,CAAG,IAC/E,OAAAX,EAAI,MAAM,sCAAsCc,CAAS,EAAE,EAC3DD,EAAI,cAAgBC,EACpBD,EAAI,OAAS,IACNA,CACX,CAEJ,EAMA,YAAa,SAAqBO,EAAK,CACnC,IAAIC,EACJ,GAAKD,EAAI,QAAQ,OAAS,CACtB,MAAME,EAAUF,EAAI,QAAQ,OAAO,MAAM,kCAAkC,EACtE,CAACE,GAAW,CAACA,EAAQ,OAAO,GAAKD,EAAW3B,EAAO,EACnD2B,EAAWC,EAAQ,OAAO,EACnC,MACID,EAAW3B,EAAO,EAEtB,OAAO2B,CACX,CAEJ",
  "names": ["path", "fs", "nanoid", "node", "uib", "sockets", "web", "done", "log", "instances", "err", "RED", "myObj", "props", "defaultAnswer", "ans", "url", "template", "extTemplate", "cmd", "templateConf", "res", "statusMsg", "fullname", "degit", "info", "fsOpts", "srcTemplate", "req", "clientId", "matches"]
}

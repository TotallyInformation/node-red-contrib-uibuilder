{
  "version": 3,
  "sources": ["src/libs/tilib.js"],
  "sourcesContent": ["/* eslint-disable prefer-named-capture-group */\n/**\n * General utility library for Node.JS\n *\n * Copyright (c) 2019-2023 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\n'use strict'\n\nconst path = require('path')\n// const fs = require('fs-extra')\n\nconst mylog = (process.env.TI_ENV === 'debug') ? console.log : function() {}\n\nmodule.exports = {\n    /** The name of the package.json file 'package.json' */\n    packageJson: 'package.json',\n\n    /** Remove leading/trailing slashes from a string\n     * @param {string} str String to trim\n     * @returns {string} Trimmed string\n     */\n    trimSlashes: function(str) {\n        return str.replace(/(^\\/*)|(\\/*$)/g, '')\n    }, // ---- End of trimSlashes ---- //\n\n    /** Joins all arguments as a URL string\n     * @see http://stackoverflow.com/a/28592528/3016654\n     * param {...string} [path] URL fragments (picked up via the arguments var)\n     * @returns {string} Joined path\n     */\n    urlJoin: function() {\n        /** @type {Array<string>} */\n        const paths = Array.prototype.slice.call(arguments)\n        const url = '/' + paths.map(function(e) {\n            return e !== undefined ? e.replace(/^\\/|\\/$/g, '') : ''\n        })\n            .filter(function(e) {\n                return e\n            })\n            .join('/')\n        return  url.replace('//', '/')\n    }, // ---- End of urlJoin ---- //\n\n    /** Escape a user input string to use in a regular expression\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n     * @param {string} string String to escape\n     * @returns {string} Input string escaped to use in a re\n     */\n    escapeRegExp: function(string) {\n        return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n    }, // ---- End of escapeRegExp ---- //\n\n    /**  Get a list of all of the npm run scripts in <folder>/package.json OR\n     * Check if a specific script exists in <folder>/package.json\n     * Used to check that restart and build scripts are available.\n     * @param {string} chkPath - The path that should contain a package.json\n     * @param {string} chkScript - OPTIONAL. If present return the script text if present\n     * @returns {object|string|undefined|null} undefined if file not found or list of script names/commands. If chkScript, null if not found or script text.\n     */\n    getNpmRunScripts: function(chkPath, chkScript = '') {\n        let pj\n        try {\n            pj = require( path.join( chkPath, this.packageJson ) ).scripts\n        } catch (e) {\n            pj = undefined\n        }\n        if ( (pj !== undefined) && (chkScript !== '') ) {\n            if (pj[chkScript] === undefined) pj = null\n            else pj = pj[chkScript]\n        }\n        return pj\n    }, // ---- End of getRedUserRunScripts ---- //\n\n    /** Merge and deduplicate multiple arrays\n     * @see https://stackoverflow.com/a/27664971/1309986\n     * @param {any[]} arr One or more arrays\n     * @returns {any[]} Deduplicated, merged single array\n     */\n    mergeDedupe: function(...arr) {\n        return [...new Set([].concat(...arr))]\n    }, // ----  ---- //\n\n    /** Utility function to html pretty-print JSON\n     * @param {*} json JSON to pretty-print\n     * @returns {string} HTML\n     */\n    syntaxHighlight: function(json) {\n        /*\n            pre .string { color: orange; }\n            .number { color: white; }\n            .boolean { color: rgb(20, 99, 163); }\n            .null { color: magenta; }\n            .key { color: #069fb3;}\n        */\n        json = JSON.stringify(json, undefined, 4)\n        json = json\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n        json = '<pre class=\"syntax-highlight\" style=\"color:white;background-color:black;overflow:auto;\">' +\n            json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/g, function (match) {\n                let cls = 'number'; let style = 'style=\"color:white\"'\n                if ((/^\"/).test(match)) {\n                    if ((/:$/).test(match)) {\n                        cls = 'key'\n                        style = 'style=\"color:#069fb3\"'\n                    } else {\n                        cls = 'string'\n                        style = 'style=\"color:orange\"'\n                    }\n                } else if ((/true|false/).test(match)) {\n                    cls = 'boolean'\n                    style = 'style=\"color:rgb(20,99,163)\"'\n                } else if ((/null/).test(match)) {\n                    cls = 'null'\n                    style = 'style=\"color:magenta\"'\n                }\n                return `<span class=\"${cls}\" ${style}>${match}</span>`\n            }) +\n            '</pre>'\n        return json\n    }, // ----  ---- //\n\n    /** Compare 2 simple arrays, return array of arrays - additions and deletions\n     * @param {Array} a1 First array\n     * @param {Array} a2 Second array\n     * @returns {[string[],string[]]} Array of 2 arrays. Inner array 1: Additions, 2: Deletions\n     */\n    compareArrays: function(a1, a2) {\n        const temp = [[], []]\n\n        // for each a1 entry, if not in a2 then push to temp[0]\n        for (let i = 0, len = a1.length; i < len; ++i) {\n            if (a2.indexOf(a1[i]) === -1) temp[0].push(a1[i])\n        }\n\n        // for each a2 entry, if not in a1 then push to temp[1]\n        for (let i = 0, len = a2.length; i < len; ++i) {\n            if (a1.indexOf(a2[i]) === -1) temp[1].push(a2[i])\n        }\n\n        // @ts-ignore\n        return temp\n    }, // ----  ---- //\n\n    /** Compare 2 simple arrays, return false as soon as a difference is found\n     * @param {Array} a1 First array\n     * @param {Array} a2 Second array\n     * @returns {boolean} False if arrays are differnt, else True\n     */\n    quickCompareArrays: function(a1, a2) {\n        // for each a1 entry, if not in a2 then push to temp[0]\n        for (let i = 0, len = a1.length; i < len; ++i) {\n            if (a2.indexOf(a1[i]) === -1) return false\n        }\n\n        // for each a2 entry, if not in a1 then push to temp[1]\n        for (let i = 0, len = a2.length; i < len; ++i) {\n            if (a1.indexOf(a2[i]) === -1) return false\n        }\n\n        return true\n    }, // ----  ---- //\n\n    /** Return only the most important parts of an ExpressJS `req` object\n     * @param {object} req express.Request\n     * @returns {object} importantReq\n     */\n    dumpReq: function(req) {\n        return {\n            'headers': {\n                'host': req.headers.host,\n                'referer': req.headers.referer,\n            },\n            'url': req.url,\n            'method': req.method,\n            'baseUrl': req.baseUrl,\n            'hostname': req.hostname,\n            'originalUrl': req.originalUrl,\n            'path': req.path,\n            'protocol': req.protocol,\n            'secure': req.secure,\n            'subdomains': req.subdomains,\n        }\n    }, // ----  ---- //\n\n    /** Debugging output that only executes if an env variable is set before Node-RED is run */\n    mylog: mylog,\n\n    /** Dump process memory use to console\n     * @param {string} prefix Text to output before the memory info\n     */\n    dumpMem: (prefix) => {\n        const mem = process.memoryUsage()\n        const formatMem = (m) => ( m / 1048576 ).toFixed(2)\n        mylog(`${prefix} Memory Use (MB): RSS=${formatMem(mem.rss)}. Heap: Used=${formatMem(mem.heapUsed)}, Tot=${formatMem(mem.heapTotal)}. Ext C++=${formatMem(mem.external)}`)\n    },\n\n} // ---- End of module.exports ---- //\n\n// EOF\n"],
  "mappings": "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",
  "names": ["path", "mylog", "str", "e", "string", "chkPath", "chkScript", "pj", "arr", "json", "match", "cls", "style", "a1", "a2", "temp", "i", "len", "req", "prefix", "mem", "formatMem", "m"]
}

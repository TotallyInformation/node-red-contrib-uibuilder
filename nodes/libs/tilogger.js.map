{
  "version": 3,
  "sources": ["src/libs/tilogger.js"],
  "sourcesContent": ["/** Custom logging module using just the Console object \n * Use as:\n *     const logger = require('./tilogger.js')\n *     var console = logger.console() // output to the current processes stdout/stderr\n *     console.verbose('This is verbose output - it will be prefixed with date/time and output level')\n * Or, create your own output log:\n *     var console = logger.console('/some/path/mylog.log') // add 2nd param if you want errors to go to a different location\n * \n * DEPENDENCIES:\n *     Node.js v8+\n * \n * Copyright (c) 2019 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n*/\n'use strict'\n\nconst fs = require('fs')\n\n/** Return a formatted date/time\n * @param {string|Date} aDT A JavaScript Date object or a date-like string\n * @returns {string} Formatted date string: 'mm-dd HH:MM:SS.SSSS'\n */\nfunction fmtDT(aDT) {\n    if (typeof aDT === 'string') aDT = new Date(aDT)\n\n    var month = String(aDT.getMonth() + 1).padStart(2,'0') // months are zero indexed\n    var day = String(aDT.getDate()).padStart(2,'0')\n    var hours = String(aDT.getHours()).padStart(2,'0')\n    var minutes = String(aDT.getMinutes()).padStart(2,'0')\n    var seconds = String(aDT.getSeconds()).padStart(2,'0')\n    var ms = String(aDT.getMilliseconds()).padStart(4,'0')\n\n    return `${month}-${day} ${hours}:${minutes}:${seconds}.${ms}`\n}\n\n/** Return a structured V8 stack trace */\nfunction prepStack(error, stack) { \n    const myStack = []\n    var j = 0\n    for (let i = 0; i < stack.length; i++) {\n        const frame = stack[i]\n        const fName = frame.getFileName()\n        if (!fName.includes('tilogger') && !fName.startsWith('internal/')) {\n            myStack.push({\n                'Position': ++j,\n                'Function':frame.getFunctionName(),\n                'File':fName,\n                'Line':frame.getLineNumber(),\n                'Col':frame.getColumnNumber(),\n                'Method':frame.getMethodName(),\n                'EvalOrigin':frame.getEvalOrigin(),\n                'isToplevel':frame.isToplevel(),\n                'isEval':frame.isEval(),\n                'isConstructor':frame.isConstructor(),\n                'isNative':frame.isNative(),\n                'TypeName':frame.getTypeName(),\n            })\n        }\n    }\n    return myStack \n}\nfunction fullStack() { \n    const origST = Error.prepareStackTrace\n\n    Error.prepareStackTrace = prepStack\n    const stack = (new Error('')).stack\n    Error.prepareStackTrace = origST\n\n    return stack\n}\n\nmodule.exports = {\n\n    /** Create a better console logger\n     * @param {string} [stdout=process.stdout] Optional. Filename to use for standard output. If blank or not provided, uses process.stdout.\n     * @param {string} [errout=process.stderr] Optional. Filename to use for error output. If blank, uses stdout if that is provided or process.stderr.\n     * @returns {console & tiConsole} Clone of console with additions.\n     */\n    console: function(stdout='', errout='', options={}) {\n        // TODO Add log rotation - @see https://github.com/iccicci/rotating-file-stream or https://www.npmjs.com/package/file-stream-rotator\n        let output, errOutput\n        if (stdout === '') output = process.stdout\n        else { output = fs.createWriteStream(stdout) }\n        if (errout === '') {\n            if (stdout !== '') errOutput = output\n            else errOutput = process.stderr\n        } else { errOutput = fs.createWriteStream(errout) }\n\n        /** Create extended logger from console\n         * @typedef {Object} tiConsole\n         * @property {string} [stdout] Location of standard output\n         * @property {string} [errout] Location of error output\n         * @property {function} [prefix] Function that adds optional text to the beginning of each output\n         * @property {function} [verbose] Additional, detailed logging level\n         * @property {function} [stack] Structured current stack output (without internal and logger)\n         * @property {function} [settings] Current logger settings\n         * @property {boolean} [debugging] myLogger.debug will only output if this is true\n         * @property {function} [debug] Independently controlled by the .debugging property, clone of log\n         * @property {array} [levels] Array of output levels available: ['none','error','warn','info','log','verbose','all']\n         * @property {string} [level=\"log\"] One of: none/error/warn/info/log/verbose/all. all=verbose\n         */\n        /** @type {console & tiConsole} */\n        const myLogger = new console.Console(output, errOutput)\n\n        // What levels of logging are available? Keep in the order least to most.\n        myLogger.levels = ['none','error','warn','info','log','verbose','all']\n        // What types of logging are there? As above plus debug & stack\n        let types = ['error','warn','info','log','verbose','debug','stack','settings']\n\n        // Record where output is going\n        myLogger.stdout = stdout\n        myLogger.errout = errout\n\n        //#region Set the output level for logging\n        var level = 'log'\n        if (options.hasOwnProperty('level')) {\n            if ( myLogger.levels.includes(options.level) ) {\n                level = options.level\n            } else {\n                level = 'log'\n            }\n        } else {\n            level = 'log'\n        }\n        myLogger.level = level\n        // TODO Add support for NODE_DEBUG env var - @see https://www.npmjs.com/package/logdown#wildcards\n        //#endregion ----- -----\n\n        /** Function to return a std formatted prefix for error/warn/info/log/verbose & debug outputs\n         * @param {string} [type=\"log\"] One of: error/warn/info/log/verbose or debug\n         * @returns {string} Fixed-width string with date/time and log level\n         */\n        myLogger.prefix = function(type='log') {\n            if ( !types.includes(type) ) type = 'unknown'\n            return `${fmtDT(new Date())} [${type.padEnd(7,' ')}]`\n        }\n        // TODO add module/function prefixes\n\n        //#region Add a prefix to all console logs!\n        // error\n        const originalConsoleError = myLogger.error\n        myLogger.error = function() {\n            // Only output if logging level is 1 (error) or above\n            if (myLogger.levels.indexOf(myLogger.level) < 1 ) return\n\n            const args = Array.from(arguments)\n            args.unshift( myLogger.prefix('error') )\n            originalConsoleError.apply( myLogger, args )\n        }\n\n        // warn\n        const originalConsoleWarn = myLogger.warn\n        myLogger.warn = function() {\n            // Only output if logging level is 2 (warn) or above\n            if (myLogger.levels.indexOf(myLogger.level) < 2 ) return\n\n            const args = Array.from(arguments)\n            args.unshift( myLogger.prefix('warn') )\n            originalConsoleWarn.apply( myLogger, args )\n        }\n\n        // info\n        const originalConsoleInfo = myLogger.info\n        myLogger.info = function() {\n            // Only output if logging level is 3 (info) or above\n            if (myLogger.levels.indexOf(myLogger.level) < 3 ) return\n\n            const args = Array.from(arguments)\n            args.unshift( myLogger.prefix('info') )\n            originalConsoleInfo.apply( myLogger, args )\n        }\n\n        // log\n        const originalConsoleLog = myLogger.log\n        myLogger.log = function() {\n            // Only output if logging level is 4 (log) or above\n            if (myLogger.levels.indexOf(myLogger.level) < 4 ) return\n\n            const args = Array.from(arguments)\n            args.unshift( myLogger.prefix('log') )\n            originalConsoleLog.apply( myLogger, args )\n        }\n\n        //verbose - new logging type, clone of log\n        myLogger.verbose = function() {\n            // Only output if logging level is 5 (verbose) or above\n            if (myLogger.levels.indexOf(myLogger.level) < 5 ) return\n\n            const args = Array.from(arguments)\n            args.unshift( myLogger.prefix('verbose') )\n            originalConsoleLog.apply( myLogger, args )\n        }\n        \n        //debug (currently an alias for console.log in node.js)\n        const originalConsoleDebug = myLogger.debug\n        /** Clone of 'log' but only outputs if myLogger.debugging = true  */\n        myLogger.debug = function() {\n            // Only output if logging level is 4 (log) or above\n            //if (myLogger.levels.indexOf(myLogger.level) < 4 ) return\n            // Only output if debugging flag is true\n            if (myLogger.debugging !== true) return\n\n            const args = Array.from(arguments)\n            args.unshift( myLogger.prefix('debug') )\n            originalConsoleDebug.apply( myLogger, args )\n        }\n\n        // Stack\n        myLogger.stack = function() {\n            // Only output if logging level is above 0 (none)\n            if (myLogger.levels.indexOf(myLogger.level) <= 0 ) return\n\n            const args = Array.from(arguments)\n            args.unshift( fullStack() )\n            args.unshift( 'Current stack: ' )\n            args.unshift( myLogger.prefix('stack') )\n            originalConsoleLog.apply( myLogger, args )\n        }\n\n        // Settings - output the current logger settings\n        myLogger.settings = function() {\n            // Only output if logging level is above 0 (none)\n            if (myLogger.levels.indexOf(myLogger.level) <= 0 ) return\n\n            const args = Array.from(arguments)\n            args.unshift( {'Level': myLogger.level, 'Debugging': myLogger.debugging} )\n            args.unshift( myLogger.prefix('settings') )\n            originalConsoleLog.apply( myLogger, args )\n        }\n        //#endregion ----- -----\n\n        return myLogger\n    }\n}"],
  "mappings": "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",
  "names": ["fs", "fmtDT", "aDT", "month", "day", "hours", "minutes", "seconds", "ms", "prepStack", "error", "stack", "myStack", "j", "frame", "fName", "fullStack", "origST", "stdout", "errout", "options", "output", "errOutput", "myLogger", "types", "level", "type", "originalConsoleError", "args", "originalConsoleWarn", "originalConsoleInfo", "originalConsoleLog", "originalConsoleDebug"]
}

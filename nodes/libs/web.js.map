{
  "version": 3,
  "sources": ["src/libs/web.js"],
  "sourcesContent": ["/** Manage ExpressJS on behalf of uibuilder\n * Singleton. only 1 instance of this class will ever exist. So it can be used in other modules within Node-RED.\n *\n * Copyright (c) 2017-2023 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk, https://github.com/TotallyInformation/node-red-contrib-uibuilder\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict'\n\n/** --- Type Defs ---\n * @typedef {import('../../typedefs.js').uibNode} uibNode\n * @typedef {import('../../typedefs.js').uibConfig} uibConfig\n * @typedef {import('../../typedefs.js').runtimeRED} runtimeRED\n * @typedef {import('../../typedefs.js').uibPackageJsonPackage} uibPackageJsonPackage\n * @typedef {import('Express')} Express\n * @typedef {import('Express').Request} ExpressRequest\n * @typedef {import('Express').NextFunction} ExpressNextFunction\n * @typedef {import('Express').Router} ExpressRouter\n */\n\nconst path = require('path')\nconst fs = require('fs')\n// const fs = require('fs-extra') // only used for ensureDirSync\nconst fg = require('fast-glob')\nconst serveIndex = require('serve-index')\nconst express = require('express')\nconst tilib = require('./tilib')\nconst uiblib = require('./uiblib')\nconst packageMgt = require('./package-mgt.js')\nconst socket = require('./socket.js')\nconst { mylog } = require('./tilib') // dumpReq, mylog\n// const { isBuffer } = require('util')\n// const { type } = require('os')\n\n// Filename for default web page\nconst defaultPageName = 'index.html'\n\nclass UibWeb {\n    /** PRIVATE Flag to indicate whether setup() has been run (ignore the false eslint error)\n     * @type {boolean}\n     */\n    #isConfigured = false\n\n    //#region ---- References to core Node-RED & uibuilder objects ---- //\n\n    /** @type {runtimeRED} */\n    RED\n\n    /** @type {uibConfig} Reference link to uibuilder.js global configuration object */\n    uib\n\n    /** Reference to uibuilder's global log functions */\n    log\n\n    //#endregion ---- References to core Node-RED & uibuilder objects ---- //\n\n    /** Reference to ExpressJS app instance being used by uibuilder\n     * Used for all other interactions with Express\n     * @type {express.Application}\n     */\n    app\n\n    /** Reference to ExpressJS server instance being used by uibuilder\n     * Used to enable the Socket.IO client code to be served to the front-end\n     */\n    server\n\n    /** Set which folder to use for the central, static, front-end resources\n     *  in the uibuilder module folders. Services standard images, ico file and fall-back index pages\n     * @type {string}\n     */\n    masterStatic\n\n    /** Holder for node instance routers\n     * @type {Object<string, express.Router>}\n     */\n    instanceRouters = {}\n\n    /** ExpressJS Route Metadata */\n    routers = { admin: [], user: [], instances: {}, config: {} }\n\n    /** Called when class is instantiated */\n    constructor() {\n\n        /** Set up a dummy ExpressJS Middleware Function\n         * @param {Express.Request} req x\n         * @param {Express.Response} res x\n         * @param {ExpressNextFunction} next x\n         */\n        this.dummyMiddleware = function(req, res, next) { next() }\n\n        // setTimeout(() => {\n        //     console.log(' \\n >> web.js dump >> ', Object.keys(this))\n        // }, 3000)\n\n    } // --- End of constructor() --- //\n\n    /** Assign uibuilder and Node-RED core vars to Class static vars.\n     *  This makes them available wherever this MODULE is require'd.\n     *  Because JS passess objects by REFERENCE, updates to the original\n     *    variables means that these are updated as well.\n     * @param {uibConfig} uib reference to uibuilder 'global' configuration object\n     * param {Object} server reference to ExpressJS server being used by uibuilder\n     */\n    setup( uib ) {\n        if ( !uib ) throw new Error('[uibuilder:web.js:setup] Called without required uib parameter or uib is undefined.')\n        if ( uib.RED === null ) throw new Error('[uibuilder:web.js:setup] uib.RED is null')\n\n        // Prevent setup from being called more than once\n        if ( this.#isConfigured === true ) {\n            uib.RED.log.warn('[uibuilder:web:setup] Setup has already been called, it cannot be called again.')\n            return\n        }\n\n        const RED = this.RED = uib.RED\n        this.uib = uib\n        const log = this.log = uib.RED.log\n\n        log.trace('[uibuilder:web:setup] Web setup start')\n\n        // Get the actual httpRoot\n        if ( RED.settings.httpRoot === undefined ) this.uib.httpRoot = ''\n        else this.uib.httpRoot = RED.settings.httpRoot\n\n        this.routers.config = { httpRoot: this.uib.httpRoot, httpAdminRoot: this.RED.settings.httpAdminRoot }\n\n        // At this point we have the refs to uib and RED\n        this.#isConfigured = true\n\n        // TODO: Replace _XXX with #XXX once node.js v14 is the minimum supported version\n        this._adminApiSetup()\n        this._setMasterStaticFolder()\n        this._webSetup()\n\n        log.trace('[uibuilder:web:setup] Web setup end')\n\n    } // --- End of setup() --- //\n\n    //#region ==== Setup - these are called AFTER #isConfigured=true ==== //\n\n    /** Add routes for uibuilder's admin REST API's */\n    _adminApiSetup() {\n        if ( this.#isConfigured !== true ) {\n            this.log.warn('[uibuilder:web.js:_adminApiSetup] Cannot run. Setup has not been called.')\n            return\n        }\n\n        this.adminRouter = express.Router({ mergeParams: true }) // eslint-disable-line new-cap\n\n        /** Serve up the v3 admin apis on /<httpAdminRoot>/uibuilder/admin/ */\n        this.adminRouterV3 = require('./admin-api-v3')(this.uib, this.log)\n        this.adminRouter.use('/admin', this.adminRouterV3)\n        this.routers.admin.push( { name: 'Admin API v3', path: `${this.RED.settings.httpAdminRoot}uibuilder/admin`, desc: 'Consolidated admin APIs used by the uibuilder Editor panel', type: 'Router' } )\n\n        /** Serve up the package docs folder on /<httpAdminRoot>/uibuilder/techdocs (uses docsify) - also make available on /uibuilder/docs\n         * @see https://github.com/TotallyInformation/node-red-contrib-uibuilder/issues/108\n         */\n        const techDocsPath = path.join(__dirname, '..', '..', 'docs')\n        this.adminRouter.use('/docs', express.static( techDocsPath, this.uib.staticOpts ) )\n        this.routers.admin.push( { name: 'Documentation', path: `${this.RED.settings.httpAdminRoot}uibuilder/docs`, desc: 'Documentation website powered by Docsify', type: 'Static', folder: techDocsPath } )\n        this.adminRouter.use('/techdocs', express.static( techDocsPath, this.uib.staticOpts ) )\n        this.routers.admin.push( { name: 'Tech Docs', path: `${this.RED.settings.httpAdminRoot}uibuilder/techdocs`, desc: 'Documentation website powered by Docsify', type: 'Static', folder: techDocsPath } )\n\n        // TODO: Move v2 API's to V3\n        this.adminRouterV2 = require('./admin-api-v2')(this.uib, this.log)\n        this.routers.admin.push( { name: 'Admin API v2', path: `${this.RED.settings.httpAdminRoot}uibuilder/*`, desc: 'Various older admin APIs used by the uibuilder Editor panel', type: 'Router' } )\n\n        /** Serve up the admin root for uibuilder on /<httpAdminRoot>/uibuilder/ */\n        this.RED.httpAdmin.use('/uibuilder', this.adminRouter, this.adminRouterV2)\n    }\n\n    /** Set up the appropriate ExpressJS web server references\n     * @protected\n     */\n    _webSetup() {\n        if ( this.#isConfigured !== true ) {\n            this.log.warn('[uibuilder:web.js:_webSetup] Cannot run. Setup has not been called.')\n            return\n        }\n\n        // Reference static vars\n        const uib = this.uib\n        const RED = this.RED\n        const log = this.log\n\n        log.trace('[uibuilder:web:_webSetup] Configuring ExpressJS')\n\n        /** We need an http server to serve the page and vendor packages. The app is used to serve up the Socket.IO client.\n         * NB: uib.nodeRoot is the root URL path for http-in/out and uibuilder nodes\n         * Always set to empty string if a dedicated ExpressJS app is required\n         * Otherwise it is set to RED.settings.httpNodeRoot\n         */\n\n        if ( uib.customServer.isCustom === true ) {\n\n            // For custom server only, Try to find the external LAN IP address of the server\n            require('dns').lookup(/** @type {string} */ (uib.customServer.hostName), 4, function (err, add) {\n                if ( err ) {\n                    log.error('[uibuilder:web.js:_websetup] DNS lookup failed.', err)\n                }\n\n                uib.customServer.host = add\n\n                log.trace(`[uibuilder:web:_webSetup] Using custom ExpressJS server at ${uib.customServer.type}://${add}:${uib.customServer.port}`)\n            })\n\n            // Port has been specified & is different to NR's port so create a new instance of express & app\n            const express = require('express')\n            this.app = express()\n\n            // Use the Express server options from settings.js uibuilder.serverOptions (if any)\n            Object.keys(uib.customServer.serverOptions).forEach( key => {\n                this.app.set(key, uib.customServer.serverOptions[key] )\n            })\n\n            /** Socket.io needs an http(s) server rather than an ExpressJS app\n             * As we want Socket.io on the same port, we have to create our own server\n             * Use https if NR itself is doing so, use same certs as NR\n             * TODO: Switch from https to http/2?\n             */\n            if ( uib.customServer.type === 'https' ) {\n                // Allow https settings separate from RED.settings.https\n                if ( RED.settings.uibuilder && RED.settings.uibuilder.https ) {\n                    try {\n                        this.server = require('https').createServer(RED.settings.uibuilder.https, this.app)\n                    } catch (e) {\n                        // Throw error - we don't want to continue if https is needed but we can't create the server\n                        throw new Error(`[uibuilder:web:webSetup:CreateServer]\\n\\t Cannot create uibuilder custom ExpressJS server.\\n\\t Check uibuilder.https in settings.js,\\n\\t make sure the key and cert files exist and are accessible.\\n\\t ${e.message}\\n \\n `)\n                    }\n                } else {\n                    if ( RED.settings.https !== undefined ) { // eslint-disable-line no-lonely-if\n                        this.server = require('https').createServer(RED.settings.https, this.app)\n                    } else {\n                        // Throw error - we don't want to continue if https is needed but we can't create the server\n                        throw new Error('[uibuilder:web:webSetup:CreateServer]\\n\\t Cannot create uibuilder custom ExpressJS server using NR https settings.\\n\\t Check https property in settings.js,\\n\\t make sure the key and cert files exist and are accessible.\\n \\n ')\n                    }\n                }\n            } else {\n                this.server = require('http').createServer(this.app)\n            }\n\n            // Connect the server to the requested port, domain is the same as Node-RED\n            this.server.on('error', (err) => {\n                if (err.code === 'EADDRINUSE') {\n                    this.server.close()\n                    log.error(\n                        `[uibuilder:web:webSetup:CreateServer] ERROR: Port ${uib.customServer.port} is already in use. Cannot create uibuilder server, use a different port number and restart Node-RED`\n                    )\n                } else {\n                    log.error(\n                        `[uibuilder:web:webSetup:CreateServer] ERROR: ExpressJS error. Cannot create uibuilder server. ${err.message}`,\n                        err\n                    )\n                }\n            })\n\n            this.server.listen(uib.customServer.port, () => {\n                // uib.customServer.host = this.server.address().address // not very useful. Typically returns `::`\n            })\n\n        } else {\n            log.trace(`[uibuilder:web:_webSetup] Using Node-RED ExpressJS server at ${RED.settings.https ? 'https' : 'http'}://${RED.settings.uiHost}:${RED.settings.uiPort}${uib.nodeRoot === '' ? '/' : uib.nodeRoot}`)\n\n            // Port not specified (default) so reuse Node-RED's ExpressJS server and app\n            // @ts-expect-error\n            this.app = /** @type {express.Application} */ (RED.httpNode) // || RED.httpAdmin\n            this.server = RED.server\n        }\n\n        if (uib.rootFolder === null) throw new Error('uib.rootFolder is null')\n        // Set views folder to uibRoot (but only if not overridden in settings)\n        if ( !uib.customServer.serverOptions.views ) {\n            this.app.set('views', path.join(uib.rootFolder, 'views') )\n            log.trace(`[uibuilder:web:_webSetup] ExpressJS Views folder set to '${path.join(uib.rootFolder, 'views')}'`)\n        } else {\n            log.trace(`[uibuilder:web:_webSetup] ExpressJS Views folder is '${uib.customServer.serverOptions.views}'`)\n        }\n\n        // Note: Keep the router vars separate so that they can be used for reporting\n\n        this.app.use(express.json())\n        this.app.use(express.urlencoded({ extended: true }))\n\n        // Create Express Router to handle routes on `<httpNodeRoot>/uibuilder/`\n        this.uibRouter = express.Router({ mergeParams: true }) // eslint-disable-line new-cap\n\n        // Add auto-generated index page to uibRouter showing all uibuilder user app endpoints at `../uibuilder/apps`\n        this._serveUserUibIndex()\n\n        // Add masterStatic to ../uibuilder - serves up front-end/... uib-styles.css, uibuilderfe...\n        if ( this.masterStatic !== undefined ) {\n            this.uibRouter.use( express.static( this.masterStatic, uib.staticOpts ) )\n            log.trace(`[uibuilder:web:_webSetup] Master Static Folder '${this.masterStatic}' added to uib router ('_httpNodeRoot_/uibuilder/')`)\n        }\n        // Add vendor paths for installed front-end libraries - from `<uibRoot>/package.json`\n        this.serveVendorPackages()\n        // Add socket.io client (../uibuilder/vendor/socket.io/socket.io.js)\n        this.serveVendorSocketIo()\n        // Serve the ping endpoint (../uibuilder/ping)\n        this.servePing()\n\n        // TODO: This needs some tweaking to allow the cache settings to change - currently you'd have to restart node-red.\n        if (uib.commonFolder === null) throw new Error('uib.commonFolder is null')\n        // Serve up the master common folder (e.g. <httpNodeRoute>/uibuilder/common/)\n        this.uibRouter.use( tilib.urlJoin(uib.commonFolderName), express.static( uib.commonFolder, uib.staticOpts ) )\n        this.routers.user.push( { name: 'Central Common Resources', path: `${this.uib.httpRoot}/uibuilder/${uib.commonFolderName}/*`, desc: 'Common resource library', type: 'Static', folder: uib.commonFolder } )\n\n        // Assign the uibRouter to the ../uibuilder url path\n        this.app.use( tilib.urlJoin(uib.moduleName), this.uibRouter )\n\n    } // --- End of webSetup() --- //\n\n    // TODO Add instance title & description to uibuilder node.\n    /** Return a dynamic index page of all uibuilder user-accessible endpoints\n     * @param {express.Request} req Express request object\n     * @param {express.Response} res Express response object\n     * @param {Function} next Function to pass to next handler\n     */\n    _serveUserUibIndex() {\n        this.uibRouter.get('/apps', (req, res, next) => {\n            // Build the web page\n            let page = `\n                <!doctype html><html lang=\"en\"><head>\n                    <meta charset=\"utf-8\">\n                    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n                    <title>App Index</title>\n                    <link rel=\"icon\" href=\"../uibuilder/images/node-blue.ico\">\n                    <link type=\"text/css\" rel=\"stylesheet\" href=\"../uibuilder/uib-brand.min.css\">\n                    <style>\n                        li > div {\n                            border-left:5px solid var(--surface5);\n                            padding-left: 5px;\n                        }\n                    </style>\n                </head><body class=\"uib\"><div class=\"container\">\n                    <h1>List of available apps</h1>\n                    <div><ul>\n            `\n\n            if ( Object.keys(this.uib.instances).length === 0 ) {\n                page += '<p>Instance list not yet ready, please try again</p>'\n            } else {\n                for (let [url, data] of Object.entries(this.uib.apps)) {\n                    const title = data.title.length === 0 ? '' : `: ${data.title}`\n                    const descr = data.descr.length === 0 ? '' : `<div>${data.descr}</div>`\n                    page += `\n                        <li>\n                            <a href=\"../${url}\">${url}${title}</a>${descr}\n                        </li>\n                    `\n                }\n            }\n\n            page += `\n                    </ul></div>\n                </div></body></html>\n            `\n\n            res.statusMessage = 'Instances listed'\n            res.status(200).send( page )\n        })\n\n        // Record this endpoint for use on details page\n        this.routers.user.push( {\n            name: 'Endpoints',\n            path: `${this.uib.httpRoot}/uibuilder/endpoints`,\n            desc: 'List of all uibuilder endpoints',\n            type: 'Get',\n            // folder: uib.commonFolder\n        } )\n    } // --- End of serveUserUibIndex --- //\n\n    /** Set folder to use for the central, static, front-end resources\n     *  in the uibuilder module folders. Services standard images, ico file and fall-back index pages\n     * @protected */\n    _setMasterStaticFolder() {\n        if ( this.#isConfigured !== true ) {\n            this.log.warn('[uibuilder:web.js:_setMasterStaticFolder] Cannot run. Setup has not been called.')\n            return\n        }\n\n        // Reference static vars\n        const uib = this.uib\n        // const RED = this.RED\n        const log = this.log\n\n        try {\n            fs.accessSync( path.join(uib.masterStaticFeFolder, defaultPageName), fs.constants.R_OK )\n            log.trace(`[uibuilder:web:setMasterStaticFolder] Using master production build folder. ${uib.masterStaticFeFolder}`)\n            this.masterStatic = uib.masterStaticFeFolder\n        } catch (e) {\n            throw new Error(`setMasterStaticFolder: Cannot serve master production build folder. ${uib.masterStaticFeFolder}`)\n        }\n    } // --- End of setMasterStaticFolder() --- //\n\n    /** Add ExpressJS Route for Socket.IO client that can be used with an import or build\n     * The socket.io server supplies one to use with an html script tag\n     */\n    serveVendorSocketIo() {\n        if ( this.#isConfigured !== true ) {\n            this.log.warn('[uibuilder:web.js:serveVendorSocketIo] Cannot run. Setup has not been called.')\n            return\n        }\n\n        // Add socket.io client - look both in uibuilder master folder, then uibRoot, then userDir\n        let sioPath = packageMgt.getPackagePath2( 'socket.io-client', [path.join(__dirname, '..', '..'), this.uib.rootFolder, this.RED.settings.userDir] )\n\n        // If it can't be found the usual way - probably because Docker being used & socket.io not in usual place\n        if ( sioPath === null ) {\n            try {\n                sioPath = path.join(path.dirname(require.resolve('socket.io-client')), '..')\n            } catch (e) {\n                this.log.error(`[uibuilder:web:serveVendorSocketIo] Cannot find socket.io-client. ${e.message}`)\n            }\n        }\n\n        if (this.vendorRouter === undefined) throw new Error('this.vendorRouter is undefined')\n\n        if ( sioPath !== null ) {\n            // console.log('>> this.uib.staticOpts >>', this.uib.staticOpts)\n            sioPath += '/dist'\n            this.vendorRouter.use( '/socket.io-client', express.static( sioPath, this.uib.staticOpts ) )\n            this.routers.user.push( { name: 'Socket.IO Client', path: `${this.uib.httpRoot}/uibuilder/vendor/socket.io-client/*`, desc: 'Socket.IO Clients', type: 'Static', folder: sioPath } )\n            // ! No! This never actually worked! :} - The socket.io SERVER actually creates the path for the client used in script tag but that doesn't work with import/build\n            // this.vendorRouter.use( '/socket.io', express.static( sioPath, opts ) )\n        } else {\n            // Error: Can't find Socket.IO\n            this.log.error(`[uibuilder:web.js:serveVendorSocketIo] Cannot find installation of Socket.IO Client. It should be in userDir (${this.RED.settings.userDir}) but is not. Check that uibuilder is installed correctly. Run 'npm ls socket.io-client'.`)\n        }\n    } // --- End of serveVendorSocketIo() --- //\n\n    /** Add ExpressJS Routes for all installed packages & ensure <uibRoot>/package.json is up-to-date. */\n    serveVendorPackages() {\n        if ( this.#isConfigured !== true ) {\n            this.log.warn('[uibuilder:web.js:serveVendorPackages] Cannot run. Setup has not been called.')\n            return\n        }\n\n        const log = this.log\n\n        if (this.uibRouter === undefined) throw new Error('this.uibRouter is undefined')\n\n        log.trace('[uibuilder:web:serveVendorPackages] Serve Vendor Packages started')\n\n        // Update the <uibRoot>/package.json file & packageMgt.uibPackageJson in case a package was manually installed then node-red restarted\n        // Get the installed packages from the `<uibRoot>/package.json` file. If it doesn't exist, this will create it.\n        const pj = packageMgt.uibPackageJson\n        if (pj === null) throw new Error('web.js:serveVendorPackages: pj is null')\n        if ( pj.dependencies === undefined ) throw new Error('web.js:serveVendorPackages: pj.dependencies is undefined')\n\n        /** Create Express Router to handle routes on `<httpNodeRoot>/uibuilder/vendor/`\n         * @type {ExpressRouter & {myname?: string}}\n         */\n        this.vendorRouter = express.Router({ mergeParams: true }) // eslint-disable-line new-cap\n        this.vendorRouter.myname = 'uibVendorRouter'\n\n        // Remove the vendor router if it already exists - we will recreate it. `some` stops once it has found a result\n        this.uibRouter.stack.some((layer, i, aStack) => {\n            if ( layer.regexp.toString() === '/^\\\\/vendor\\\\/?(?=\\\\/|$)/i' ) {\n                aStack.splice(i, 1)\n                return true\n            }\n            return false\n        } )\n        this.routers.user.some((entry, i, uRoutes) => {\n            if ( entry.name === 'Vendor Routes' ) {\n                uRoutes.splice(i, 1)\n                return true\n            }\n            return false\n        } )\n\n        // Assign the vendorRouter to the ../uibuilder/vendor url path (via uibRouter)\n        this.uibRouter.use( '/vendor', this.vendorRouter )\n        this.routers.user.push( { name: 'Vendor Routes', path: `${this.uib.httpRoot}/uibuilder/vendor/*`, desc: 'Front-end libraries are mounted under here', type: 'Router' } )\n        log.trace(`[uibuilder:web:serveVendorPackages] Vendor Router created at '${this.uib.httpRoot}/uibuilder/vendor/*.`)\n\n        Object.keys(pj.dependencies).forEach( packageName => {\n            if ( pj.uibuilder === undefined || pj.uibuilder.packages === undefined ) throw new Error('web.js:serveVendorPackages: pj.uibuilder or pj.uibuilder.packages is undefined')\n\n            /** @type {uibPackageJsonPackage} */\n            const pkgDetails = pj.uibuilder.packages[packageName]\n\n            if ( this.vendorRouter === undefined ) throw new Error('web.js:serveVendorPackages: this.vendorRouter is undefined')\n            if ( pkgDetails.installFolder === undefined || pkgDetails.packageUrl === undefined ) throw new Error('web.js:serveVendorPackages: pkgDetails.installFolder or pkgDetails.packageUrl is undefined')\n\n            if ( !pkgDetails.missing ) { // Only if the package is actually installed\n                // Add a route for each package to this.vendorRouter\n                this.vendorRouter.use(\n                    pkgDetails.packageUrl,\n                    express.static(\n                        pkgDetails.installFolder,\n                        this.uib.staticOpts\n                    )\n                )\n                log.trace(`[uibuilder:web:serveVendorPackages] Vendor Route added for '${packageName}'. Fldr: '${pkgDetails.installFolder}', URL: '${this.uib.httpRoot}/uibuilder/vendor/${pkgDetails.packageUrl}/'. `)\n            }\n        })\n\n        log.trace('[uibuilder:web:serveVendorPackages] Serve Vendor Packages end')\n    } // ---- End of serveVendorPackages ---- //\n\n    /** Add the ping endpoint to /uibuilder/ping\n     * This just returns a 201 (No Content) response and can be used for a keepalive process from the client.\n     */\n    servePing() {\n        if (this.uibRouter === undefined) throw new Error('this.uibRouter is undefined')\n\n        this.uibRouter.get('/ping', (req, res) => {\n            res.status(204).end()\n        })\n        this.routers.user.push( { name: 'Ping', path: `${this.uib.httpRoot}/uibuilder/ping`, desc: 'Ping/keep-alive endpoint, returns 201', type: 'Endpoint' } )\n    }\n\n    //#endregion ==== End of Setup ==== //\n\n    /** Allow the isConfigured flag to be read (not written) externally\n     * @returns {boolean} True if this class as been configured\n     */\n    get isConfigured() {\n        return this.#isConfigured\n    }\n\n    //#region ====== Per-node instance processing ====== //\n\n    /** Remove an ExpressJS router from the stack\n     * @param {string} url The url of the router to remove\n     */\n    removeRouter(url) {\n        this.app._router.stack.forEach( (route, i, routes) => {\n            if (route.regexp.toString() === `/^\\\\/${url}\\\\/?(?=\\\\/|$)/i` ) {\n                routes.splice(i, 1)\n            }\n        })\n    } // ---- End of removeRouter ---- //\n\n    /** *\uFE0F\u20E3 Setup the web resources for a specific uibuilder instance\n     * @param {uibNode} node Reference to the uibuilder node instance\n     */\n    instanceSetup(node) {\n        if (this.uib.RED === null) throw new Error('this.uib.RED is null')\n        this.uib.RED.log.trace(`[uibuilder:web.js:instanceSetup] Setup for URL: ${node.url}`)\n\n        // Reference static vars\n        const uib = this.uib\n        // const RED = this.RED\n        const log = this.log\n\n        // NOTE: When an instance is renamed or deleted, the routes are removed\n        //       See the relevant parts of uibuilder.js for details.\n\n        // Reset the routes for this instance\n        this.routers.instances[node.url] = []\n        this.removeRouter(node.url)\n\n        /** Make sure that the common static folder is only loaded once */\n        node.commonStaticLoaded = false\n\n        // Create router for this node instance\n        this.instanceRouters[node.url] = express.Router({ mergeParams: true }) // eslint-disable-line new-cap\n        this.routers.instances[node.url].push( { name: 'Instance Rooter', path: `${this.uib.httpRoot}/${node.url}/`, desc: 'Other routes hang off this', type: 'Router', folder: '--' } )\n\n        /** We want to add services in the right order - first load takes preference:\n         *   (1) Middleware: (a) common (for all instances), (b) internal (all instances), (c) (if allowed in settings) instance API middleware\n         *   (2) Front-end user code: (a) dynamic templated (*.ejs) & explicit (*.html) from views folder, (b) src or dist static\n         *   (3) Master static folders - for the built-in front-end resources (css, default html, uibuilderfe, etc)\n         *   (4) [Optionally] The folder lister\n         *   (5) Common static folder is last\n         * TODO Make sure the above is documented in Docs\n         */\n\n        // (1.) Instance log route (./_clientLog)\n        this.addBeaconRoute(node)\n        // (1a) httpMiddleware - Optional common middleware from a custom file (same for all instances)\n        this.addMiddlewareFile(node)\n        // (1b) masterMiddleware - uib's internal dynamic middleware to add uibuilder specific headers & cookie\n        this.addMasterMiddleware(node)\n\n        // (1c) Add user-provided API middleware\n        if (uib.instanceApiAllowed === true ) this.addInstanceApiRouter(node)\n        else log.trace(`[uibuilder:webjs:instanceSetup] Instance API's not permitted. '${node.url}'`)\n\n        // ! IN-PROGRESS (1d) Add user-provided router middleware\n        this.addInstanceCustomRoutes(node)\n\n        if (uib.rootFolder === null) throw new Error('uib.rootFolder has no value')\n        const rootFolder = uib.rootFolder\n\n        // ! IN PROCRESS - Render views\n        /** (2a) Render dynamic and explicit template files from views folder\n         * ! NOTE: If you create a `views/index.html`, you will never reach your actual `src/index.html` (or dist)\n         * TODO For render - prevent base outside instanceRoot/views/ - https://security.stackexchange.com/a/123723/20102\n         * TODO Allow views dir to be set in editor\n         * TODO Allow custom data to be added via Editor and/or msg\n         * ? TODO give access to global/flow/node vars ? DANGEROUS - needs a list for specific entries instead.\n         * ? TODO change instance static to optional render\n         */\n        this.instanceRouters[node.url].use( (req, res, next) => {\n            const pathRoot = path.join(rootFolder, node.url, 'views')\n            const requestedView = path.parse(req.path)\n            let filePath = path.join(pathRoot, requestedView.base)\n\n            if (this.app.get('view engine')) {\n                filePath = path.join(pathRoot, `${requestedView.name}.ejs`)\n                if (fs.existsSync(filePath)) {\n                    // console.log('>> render >>', requestedView.name, filePath) //! TODO - remove\n                    try {\n                        // res.render( path.join(uib.rootFolder, node.url, 'views', requestedView.name), {foo:'Crunchy', footon: 'bar stool', _env: node.context().global.get('_env')} )\n                        res.render( path.join(rootFolder, node.url, 'views', requestedView.name), { _env: node.context().global.get('_env') } )\n                    } catch (e) {\n                        res.sendFile( requestedView.base, { root: pathRoot } )\n                    }\n                    return\n                }\n            }\n            return next()\n        }) // --- End of render views --- //\n\n        // (2b) THIS IS THE IMPORTANT ONE - customStatic - Add static route for instance local custom files (src or dist)\n        this.instanceRouters[node.url].use( this.setupInstanceStatic(node) )\n\n        // (3) Master Static - Add static route for uibuilder's built-in front-end code\n        if ( this.masterStatic !== undefined ) {\n            this.instanceRouters[node.url].use( express.static( this.masterStatic, uib.staticOpts ) )\n            this.routers.instances[node.url].push( { name: 'Master Code', path: `${this.uib.httpRoot}/${node.url}/`, desc: 'Built-in FE code, same for all instances', type: 'Static', folder: this.masterStatic } )\n        }\n\n        /** (4) If enabled, allow for directory listing of the custom instance folder */\n        if ( node.showfolder === true ) {\n            this.instanceRouters[node.url].use(\n                '/idx',\n                serveIndex( node.customFolder, { 'icons': true, 'view': 'details' } ),\n                express.static( node.customFolder, uib.staticOpts ) // Needed to allow index view to show actual files\n            )\n            this.routers.instances[node.url].push( { name: 'Index Lister', path: `${this.uib.httpRoot}/${node.url}/idx`, desc: 'Custom pages to list server files', type: 'ServeIndex', folder: node.customFolder } )\n        }\n\n        if (uib.commonFolder === null) throw new Error('uib.commonFolder is null')\n\n        // (5) Serve up the uibuilder static common folder on `<httpNodeRoot>/<url>/<commonFolderName>` (it is already available on `<httpNodeRoot>/uibuilder/<commonFolderName>/`, see _webSetup()\n        this.instanceRouters[node.url].use( tilib.urlJoin(uib.commonFolderName), express.static( uib.commonFolder, uib.staticOpts ) )\n        // Track routes\n        this.routers.instances[node.url].push( { name: 'Common Code', path: `${this.uib.httpRoot}/${node.url}/common/`, desc: 'Shared FE code, same for all instances', type: 'Static', folder: uib.commonFolder } )\n\n        // Apply this instances router to the url path on `<httpNodeRoot>/<url>/`\n        this.app.use( tilib.urlJoin(node.url), this.instanceRouters[node.url])\n\n        // this.dumpUserRoutes(true)\n        // this.dumpInstanceRoutes(true, node.url)\n    } // --- End of instanceSetup --- //\n\n    /** (1a) Optional common middleware from a file (same for all instances)\n     * @param {uibNode} node Reference to the uibuilder node instance\n     */\n    addMiddlewareFile(node) {\n        // Reference static vars\n        const uib = this.uib\n        // const RED = this.RED\n        const log = this.log\n\n        /** Provide the ability to have a ExpressJS middleware hook.\n         * This can be used for custom authentication/authorisation or anything else.\n         */\n\n        if (uib.configFolder === null) throw new Error('uib.configFolder is null')\n\n        /** Check for <uibRoot>/.config/uibMiddleware.js, use it if present. Copy template if not exists @since v2.0.0-dev4 */\n        const uibMwPath = path.join(uib.configFolder, 'uibMiddleware.js')\n        try {\n            const uibMiddleware = require(uibMwPath)\n            if ( typeof uibMiddleware === 'function' ) {\n                // ! TODO: Add some more checks in here (e.g. does the function have a next()?)\n                this.instanceRouters[node.url].use( uibMiddleware )\n                log.trace(`[uibuilder:web:addMiddlewareFile:${node.url}] uibuilder common Middleware file loaded. Path: ${uibMwPath}`)\n                this.routers.instances[node.url].push( { name: 'Common Middleware', path: `${this.uib.httpRoot}/${node.url}/`, desc: 'Optional middleware, same for all instances', type: 'Handler', folder: uibMwPath } )\n            } else {\n                log.trace(`[uibuilder:web:addMiddlewareFile:${node.url}] uibuilder common Middleware file not loaded, not a function. Type: ${typeof uibMiddleware}, Path: ${uibMwPath}`)\n            }\n        } catch (e) {\n            log.trace(`[uibuilder:web:addMiddlewareFile:${node.url}] uibuilder common Middleware file failed to load. Path: ${uibMwPath}, Reason: ${e.message}`)\n        }\n    } // --- End of addMiddlewareFile --- //\n\n    /** (1b) Add uib's internal dynamic middleware - adds uibuilder specific headers & cookies\n     * @param {uibNode} node Reference to the uibuilder node instance\n     */\n    addMasterMiddleware(node) { // eslint-disable-line class-methods-use-this\n        const uib = this.uib\n\n        let mypath\n        if ( uib.nodeRoot === '' || uib.nodeRoot === '/' )  mypath = `/${node.url}/`\n        else mypath = `${uib.nodeRoot}${node.url}/`\n\n        const qSec = uib.customServer.type === 'https' // true if using https else false\n\n        const that = this\n\n        /**\n         * Return a middleware handler\n         * @param {express.Request} req Express request object\n         * @param {express.Response} res Express response object\n         * @param {express.NextFunction} next Express next() function\n         */\n        function masterMiddleware (req, res, next) {\n            // Check for client id from client - if it exists, reuse it otherwise create one\n            const clientId = uiblib.getClientId(req)\n\n            // TODO: X-XSS-Protection only needed for html (and js?), not for css, etc\n            res\n                // Headers only accessible in the browser via web workers\n                .header({\n                    // Help reduce risk of XSS and other attacks\n                    'X-XSS-Protection': '1;mode=block',\n                    'X-Content-Type-Options': 'nosniff',\n                    // 'X-Frame-Options': 'SAMEORIGIN',\n                    // Content-Security-Policy': \"script-src 'self'\",\n                    // Tell the client that uibuilder is being used (overides the default \"ExpressJS\" entry)\n                    'x-powered-by': 'uibuilder',\n                    // Tell the client what Socket.IO namespace to use,\n                    'uibuilder-namespace': node.url, // only client accessible from xhr or web worker\n                    'uibuilder-node': node.id,\n                    // 'uibuilder-path': mypath,\n                })\n                // .links({\n                //     help: '',\n                // })\n                .cookie('uibuilder-namespace', node.url, {\n                    path: mypath,\n                    sameSite: true,\n                    // @ts-expect-error\n                    expires: 0, // session cookie only - expires/maxAge\n                    secure: qSec,\n                })\n                // Give the client a fixed session id\n                .cookie('uibuilder-client-id', clientId, {\n                    path: mypath,\n                    sameSite: true,\n                    // @ts-expect-error\n                    expires: 0, // session cookie only - expires/maxAge\n                    secure: qSec,\n                })\n                // Tell clients what httpNodeRoot to use (affects Socket.io path)\n                .cookie('uibuilder-webRoot', uib.nodeRoot.replace(/\\//g, ''), {\n                    path: mypath,\n                    sameSite: true,\n                    // @ts-expect-error\n                    expires: 0, // session cookie only - expires/maxAge\n                    secure: qSec,\n                })\n\n            // that.dumpExpressReqAppRes(req, res)\n\n            next()\n        }\n\n        this.instanceRouters[node.url].use(masterMiddleware )\n\n        // Track routes\n        that.routers.instances[node.url].push( { name: 'uib Internal Middleware', path: `${that.uib.httpRoot}/${node.url}/`, desc: 'Master middleware, same for all instances', type: 'Handler', folder: '(internal)' } )\n\n    } // --- End of addMasterMiddleware --- //\n\n    /** (2) Front-end code is mounted here - Add static ExpressJS route for an instance local resource files\n     * Called on startup but may also be called if user changes setting Advanced/Serve\n     * @param {uibNode} node Reference to the uibuilder node instance\n     * @returns {express.RequestHandler} serveStatic for the folder containing the front-end code\n     */\n    setupInstanceStatic(node) {\n        // Reference static vars\n        const uib = this.uib\n        // const RED = this.RED\n        const log = this.log\n\n        let customStatic = node.sourceFolder\n\n        // Cope with pre v4.1 node configs (sourceFolder not defined)\n        if ( node.sourceFolder === undefined ) {\n            try {\n                // Check if local dist folder contains an index.html & if NR can read it - fall through to catch if not\n                fs.accessSync( path.join(node.customFolder, 'dist', defaultPageName), fs.constants.R_OK )\n                // If the ./dist/index.html exists use the dist folder...\n                customStatic = 'dist'\n                log.trace(`[uibuilder:web:setupInstanceStatic:${node.url}] Using local dist folder`)\n                // NOTE: You are expected to have included vendor packages in\n                //       a build process so we are not loading them here\n            } catch (e) {\n                // dist not being used or not accessible, use src\n                log.trace(`[uibuilder:web:setupInstanceStatic:${node.url}] Dist folder not in use or not accessible. Using local src folder. ${e.message}` )\n                customStatic = 'src'\n            }\n        }\n\n        const customFull = path.join(node.customFolder, customStatic)\n\n        // Does the customStatic folder exist? If not, then create it\n        try {\n            // With recursive, will create missing parents and does not error if parents already exist\n            fs.mkdirSync( customFull, {recursive:true} )\n            // fs.ensureDirSync( customFull ) // requires fs-extra\n            log.trace(`[uibuilder:web:setupInstanceStatic:${node.url}] Using local ${customStatic} folder`)\n        } catch (e) {\n            node.warn(`[uibuilder:web:setupInstanceStatic:${node.url}] Cannot create or access ${customFull} folder, no pages can be shown. Error: ${e.message}`)\n        }\n\n        // Does it contain an index.html file? If not, then issue a warn\n        if ( !fs.existsSync( path.join(customFull, defaultPageName) ) ) {\n            node.warn(`[uibuilder:web:setupInstanceStatic:${node.url}] Cannot show default page, index.html does not exist in ${customFull}.`)\n        }\n\n        // Track the route\n        this.routers.instances[node.url].push( { name: 'Front-end user code', path: `${uib.httpRoot}/${node.url}/`, desc: 'Your own FE Code', type: 'Static', folder: customFull } )\n\n        // Return the serveStatic\n        return express.static( customFull, uib.staticOpts )\n\n    } // --- End of setupInstanceStatic --- //\n\n    /** Load & return an ExpressJS Router from file(s) in <uibRoot>/<node.url>/api/*.js\n     * @param {uibNode} node Reference to the uibuilder node instance\n     * @returns {object|undefined} Valid instance router or undefined\n     */\n    addInstanceApiRouter(node) {\n        // Reference static vars\n        const uib = this.uib\n        // const RED = this.RED\n        const log = this.log\n\n        // Allow all .js files in api folder to be loaded, always returns an array - NB: Fast Glob requires fwd slashes even on Windows\n        const apiFiles = fg.sync(`${uib.rootFolder}/${node.url}/api/*.js`)\n        // console.log('>> apiFiles >>', `${uib.rootFolder}/${node.url}/api/*.js`, apiFiles)\n        apiFiles.forEach( instanceApiPath => {\n            // console.log('>> api file >>', instanceApiPath)\n\n            // Try to require the api module file\n            let instanceApi\n            try {\n                instanceApi = require(instanceApiPath)\n            } catch (e) {\n                log.error(`[uibuilder:webjs:addInstanceApiRouter] Could not require instance API file. API not added. '${node.url}', '${instanceApiPath}'. ${e.message}`)\n                return false\n            }\n\n            // TODO Add to this.routers.instances[node.url]\n            // if instanceApi is a function, simply .use it on /api\n            if ( instanceApi && typeof instanceApi === 'function' ) {\n                log.trace(`[uibuilder:webjs:addInstanceApiRouter] ${node.url} function api added`)\n                this.instanceRouters[node.url].use( '/api', instanceApi )\n                return\n            }\n\n            // Make sure we can understand the contents\n            let keys\n            try {\n                keys = Object.keys(instanceApi)\n            } catch (e) {\n                log.error(`[uibuilder:webjs:addInstanceApiRouter] Could not understand API file properties - is it an object? It must be an object or a function, see the docs for details. '${node.url}', '${instanceApiPath}'. ${e.message}`)\n                return false\n            }\n\n            // allow `path` property - if present, use as api path\n            let apipath\n            if ( instanceApi.path ) apipath = instanceApi.path\n            else apipath = '/api/*'\n\n            // allow apiSetup function\n            if ( instanceApi.apiSetup && typeof instanceApi.apiSetup === 'function' ) {\n                instanceApi.apiSetup(node, uib)\n            }\n\n            // ! TODO: FIX THIS, IT DOES NOT WORK!\n            // Each property in the imported object MUST match an ExpressJS method or `use` & must be a function\n            keys.forEach( fnName => {\n                if ( fnName === 'path' || fnName === 'apiSetup' ) return // ignore this\n\n                // TODO validate verb\n                if ( typeof instanceApi[fnName] === 'function' ) {\n                    log.trace(`[uibuilder:webjs:addInstanceApiRouter] ${node.url} api added. ${fnName}, ${apipath}`)\n                    this.instanceRouters[node.url][fnName]( apipath, instanceApi[fnName] )\n                }\n            })\n\n        })\n\n        return undefined\n    } // ---- End of getInstanceApiRouter ---- //\n\n    /** Create instance details web page\n     * @param {ExpressRequest} req ExpressJS Request object\n     * @param {uibNode} node configuration data for this instance\n     * @returns {string} page html\n     */\n    showInstanceDetails(req, node) {\n        // Reference static vars\n        const uib = this.uib\n        const RED = this.RED\n        const userDir = RED.settings.userDir\n        // const log = this.log\n\n        let page = ''\n\n        // If using own Express server, correct the URL's\n        if (!req.headers.referer) throw new Error('req.headers.referer does not exist')\n        const url = new URL(req.headers.referer)\n        url.pathname = ''\n        // @ts-expect-error\n        if (uib.customServer && uib.customServer.port && uib.customServer.port != RED.settings.uiPort ) { // eslint-disable-line eqeqeq\n            // http://127.0.0.1:3001/uibuilder/vendor/bootstrap/dist/css/bootstrap.min.css\n            // customServer: { port: 3001, type: 'http', host: '::' }\n            url.port = uib.customServer.port.toString()\n        }\n        const urlPrefix = url.href\n        // let urlRoot = `${urlPrefix}${uib.nodeRoot.replace('/','')}${uib.moduleName}`\n        const urlRoot = `${urlPrefix}${uib.nodeRoot.replace('/', '')}${node.url}`\n\n        const nodeKeys = [\n            'id', 'type',\n            'name', 'wires', '_wireCount', 'credentials', 'topic', 'url',\n            'fwdInMessages', 'allowScripts', 'allowStyles', 'copyIndex', 'showfolder',\n            // 'useSecurity',\n            'sessionLength', 'tokenAutoExtend', 'customFolder',\n            'ioClientsCount', 'rcvMsgCount', 'ioNamespace'\n        ]\n        // functions: ['_closeCallbacks', '_inputCallback', '_inputCallbacks', 'send', ]\n        // Keep secret: ['jwtSecret', ]\n\n        const ns = socket.getNs(node.url)\n\n        page += `\n            <!doctype html><html lang=\"en\"><head>\n                <title>uibuilder Instance Debug Page</title>\n                <link rel=\"icon\" href=\"${urlRoot}/common/images/node-blue.ico\">\n                <link type=\"text/css\" rel=\"stylesheet\" href=\"${urlRoot}/uib-brand.min.css\" media=\"screen\">\n                <style type=\"text/css\" rel=\"stylesheet\" media=\"all\">\n                    h2 { border-top:1px solid silver;margin-top:1em;padding-top:0.5em; }\n                    .col3i tbody>tr>:nth-child(3){ font-style:italic; }\n                </style>\n            </head><body class=\"uib\"><div class=\"container\">\n                <h1>uibuilder Instance Debug Page</h1>\n                <p>\n                    Note that this page is only accessible to users with Node-RED admin authority.\n                </p>\n                <h2>Instance Information for '${node.url}'</h2>\n                <table class=\"uib-info-tb\">\n                    <tbody>\n                        <tr>\n                            <th>The node id for this instance</th>\n                            <td>${node.id}<br>\n                                This can be used to search for the node in the Editor.\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>Filing system path to front-end resources</th>\n                            <td>${node.customFolder}<br>\n                                Contains all of your UI code and other resources.\n                                Folders and files can be viewed, edited, created and deleted using the \"Edit Files\" button.\n                                You <b>MUST</b> keep at least the <code>src</code> and <code>dist</code> folders otherwise things may not work.\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>URL for the front-end resources</th>\n                            <td><a href=\"${urlPrefix}${tilib.urlJoin(uib.nodeRoot, node.url).replace('/', '')}\" target=\"_blank\">.${tilib.urlJoin(uib.nodeRoot, node.url)}/</a><br>Index.html page will be shown if you click.</td>\n                        </tr>\n                        <tr>\n                            <th>Node-RED userDir folder</th>\n                            <td>${userDir}<br>\n                                Also the location for any installed vendor resources (installed library packages)\n                                and your other nodes.\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>URL for vendor resources</th>\n                            <td>../uibuilder/vendor/<br>\n                                See the <a href=\"../../uibindex\" target=\"_blank\">Detailed Information Page</a> for more details.\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>Filing system path to common (shared) front-end resources</th>\n                            <td>${uib.commonFolder}<br>\n                                Resource files in this folder are accessible from the main URL.\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>Filing system path to common uibuilder configuration resource files</th>\n                            <td>${uib.configFolder}<br>\n                                Contains the package list, master package list, authentication and authorisation middleware.\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>Filing system path to uibuilder master template files</th>\n                            <td>${uib.masterTemplateFolder}<br>\n                                These are copied to any new instance of the uibuilder node.\n                                If you keep the copy flag turned on they are re-copied if deleted.\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>uibuilder version</th>\n                            <td>${uib.version}</td>\n                        </tr>\n                        <tr>\n                            <th>Node-RED version</th>\n                            <td>${RED.settings.version}<br>\n                                Minimum version required by uibuilder is ${uib.me['node-red'].version}\n                            </td>\n                        </tr>\n                        <tr>\n                            <th>Node.js version</th>\n                            <td>${uib.nodeVersion.join('.')}<br>\n                                Minimum version required by uibuilder is ${uib.me.engines.node}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <h2>Node Instance Configuration Items</h2>\n                <p>\n                    Shows the internal configuration.\n                </p>\n                <table class=\"uib-info-tb\">\n                    <tbody>\n        `\n\n        nodeKeys.sort().forEach( item => {\n            let info = node[item]\n\n            if ( item === 'ioNamespace' ) info = ns.name\n            if ( item === 'ioClientsCount' ) info = ns.sockets.size\n\n            try {\n                if ( info !== null && info.constructor.name === 'Object' ) info = JSON.stringify(info)\n            } catch (e) {\n                if ( info !== undefined ) {\n                    RED.log.warn(`[uibuilder:webjs:showInstanceDetails] ${node.id}, ${url}: Item '${item}' failed to stringify. ${e.message}`)\n                }\n            }\n\n            page += `\n                        <tr>\n                            <th>${item}</th>\n                            <td>${info}</td>\n                        </tr>\n            `\n        })\n\n        page += `\n                    </tbody>\n                </table>\n                <div></div>\n        `\n\n        const iRoutes = Object.values(this.dumpInstanceRoutes(false, node.url))[0]\n        page += `\n            <h4>Instance Routes for ${node.url}</h4>\n            ${this.htmlBuildTable( this.routers.instances[node.url], ['name', 'desc', 'path', 'type', 'folder'] )}\n            <h5>ExpressJS technical route data for <code>${node.url}</code> (<code>../${node.url}/*</code>)</h5>\n            ${this.htmlBuildTable( iRoutes, ['name', 'path', 'folder', 'route'] )}\n            `\n\n        page += `\n            </body></html>\n\n        `\n\n        return page\n    } // ---- End of showInstanceDetails ---- //\n\n    /** Creates a route for logging to NR from the front-end via HTTP Beacons\n     * In FE code, use as: navigator.sendBeacon('./_clientLog', `pageshow. From Cache?: ${event.persisted}`)\n     * Only text can be sent. This fn attempts to split the text on \"::\". If it succedes, the 1st entry\n     * is assumed to be the log level. If no level provided, assumes \"debug\" level so it won't show in NR logs by default.\n     * @param {uibNode} node configuration data for this instance\n     */\n    addBeaconRoute(node) {\n        // Reference static vars\n        const uib = this.uib\n        // const RED = this.RED\n        const log = this.log\n\n        if (uib.configFolder === null) throw new Error('uib.configFolder is null')\n\n        const logUrl = '/_clientLog'   // e.g. https://red.local:1880/<httpRoot>/<url>/_clientLog\n\n        // Only the text processor is useful since navigator.sendBeacon() only seems to send text no matter what MDN says. //express.json(), express.text(), express.urlencoded({extended: true}),\n        this.instanceRouters[node.url].post(logUrl, express.text(), (req, res) => {\n            log.trace(`[uibuilder:web:addLogRoute:${node.url}] POST to client logger: ${req.body}`)\n            res.status(204) // 204 = no content\n\n            const splitBody = req.body.split('::')\n            let logLevel = 'debug'\n            let logTxt = req.body\n            if (splitBody.length > 1) {\n                logLevel = splitBody.shift()\n                logTxt = splitBody.join('::')\n            } // Else no level provided, assume \"debug\"\n\n            log[logLevel](`[uibuilder:clientLog:${node.url}] ${logTxt}`)\n\n            let clientId\n            try {\n                clientId = req.headers.cookie.split(';').filter( c => c.trim().startsWith('uibuilder-client-id='))[0].replace('uibuilder-client-id=', '').trim()\n            } catch (e) {}\n\n            // Send a control msg to let the flows know (via port#2) a client has logged something\n            node.send( [null, {\n                'uibuilderCtrl': 'client beacon log',\n                'topic': node.topic || undefined,\n                'payload': logTxt,\n                'logLevel': logLevel,\n                // 'version': socket.handshake.auth.clientVersion, // Let the flow know what v of uib client is in use\n                // '_socketId': socket.id,\n                // 'ip': getClientRealIpAddress(socket),\n                'ip': req.headers['x-real-ip'] || req.headers['x-forwarded-for'] || req.socket.remoteAddress,\n                'clientId': clientId, // ['uibuilder-client-id'], // socket.handshake.auth.clientId,\n                // 'tabId': socket.handshake.auth.tabId,\n                'url': node.url,\n                // 'pageName': pageName,\n                // 'connections': socket.handshake.auth.connectedNum,\n                // 'lastNavType': socket.handshake.auth.lastNavType,\n            }] )\n        } )\n\n        log.trace(`[uibuilder:web:addLogRoute:${node.url}] Client Beacon Log route added`)\n        this.routers.instances[node.url].push( { name: 'Client Log', path: logUrl, desc: 'Client beacon log back to Node-RED', type: 'POST', folder: 'N/A' } )\n    }\n\n    /** If allowed and if any exist, add instance custom routes from <uibRoot>/<node.url>/routes/*.js */\n    addInstanceCustomRoutes(node) {\n        // Reference static vars\n        const uib = this.uib\n        // const RED = this.RED\n        const log = this.log\n\n        // Is this capability turned on in settings.js?\n\n        // Add routers from each <uibRoot>/<node.url>/routes/*.js file (Empty list if fldr doesn't exist or no files)\n        const routeFiles = fg.sync(`${uib.rootFolder}/${node.url}/routes/*.js`)\n        routeFiles.forEach( routeFilePath => {\n            let instanceRouteFile = {}\n            let routeKeys = []\n            try {\n                instanceRouteFile = require(routeFilePath)\n                routeKeys = Object.keys(instanceRouteFile)\n            } catch (e) {\n                log.error(`[uibuilder:webjs:addInstanceCustomRoutes:${node.url}] Could not require instance route file. '${routeFilePath}'. ${e.message}`)\n                return false\n            }\n\n            routeKeys.forEach( routeFnName => {\n                const route = instanceRouteFile[routeFnName]\n                // Route must contain all 3 properties, callback must EITHER be a function or an array of functions\n                if ( !(route.method && route.path && route.callback) ) {\n                    log.warn(`[uibuilder:webjs:addInstanceApiRouter:${node.url}] Cannot add route from '${routeFilePath}'. '${routeFnName}' has invalid data. Ensure it has 'method', 'path' and 'callback' properties.`)\n                } else {\n                    // if (!route.path.startsWith('/')) route.path = `/${route.path}` // Must start with a /\n\n                    log.trace(`[uibuilder:webjs:addInstanceApiRouter:${node.url}] Custom route added. '${routeFilePath}', '${routeFnName}'`)\n\n                    this.instanceRouters[node.url][route.method]( route.path, route.callback )\n\n                    // Track routes\n                    this.routers.instances[node.url].push( { name: `Custom route: ${routeFnName}`, path: `${this.uib.httpRoot}/${node.url}${route.path}`, desc: `Custom route from '${routeFilePath}'`, type: route.method.toUpperCase(), folder: routeFilePath } )\n                }\n            })\n        })\n    }\n\n    //#endregion ====== Per-node instance processing ====== //\n\n    //#region ==== ExpressJS Route & other Reporting ==== //\n\n    /** Summarise Express route properties\n     * @param {*} L Express Route Stack Layer\n     * @param {*} out Save to\n     */\n    summariseRoute(L, out) {\n        if (L.name === 'query' || L.name === 'expressInit') return\n\n        const x = {\n            'name': L.name,\n            'path':\n                L.regexp.toString()\n                    .replace('/^\\\\', '')\n                    .replace('\\\\/?(?=\\\\/|$)/i', '/')\n                    .replace('\\\\/?$/i', '/')\n                    .replace('/^\\\\/?$/i', '/')\n                    .replace('//?(?=/|$)/i', '/')\n                    .replace(/\\\\/g, '')\n                    .replace('/(?:([^/]+?))/', '/'),\n        }\n\n        if (L.route !== undefined) {\n            if ( !L.route.stack[0].method ) x.route = Object.keys(L.route.methods).join(',')\n            else x.route = `${L.route.stack[0].method}:${L.route.stack[0].regexp}`\n        }\n\n        const pkgs = packageMgt.uibPackageJson.uibuilder.packages\n\n        if ( x.path && x.path === '/common/' ) x.folder = this.uib.commonFolder\n        else if ( x.path && x.path === '/?(?=/|$)/i' ) {\n            x.path = '/'\n            x.folder = '(route applied direct)'\n            // x.folder = this.masterStatic\n            // console.log('>>', L)\n        } else if ( pkgs[x.path.slice(1, -1)] ) {\n            x.folder = pkgs[x.path.slice(1, -1)].installFolder\n        }\n\n        out.push( x )\n    }\n\n    /** Return a summary of all the ExpressJS routes for a specific uibuilder instance & output to console if required\n     * @param {boolean} print If true, output to console\n     * @param {string|null} [url] Optional. If not null, only dump the given instance\n     * @returns {any} Summary object\n     */\n    dumpInstanceRoutes(print = true, url = null) {\n        const instances = {}\n\n        let urls = []\n        if ( url === null ) {\n            urls = Object.keys(this.instanceRouters)\n        } else {\n            urls = [url]\n        }\n\n        // Get each uibuilder instance's routes\n        urls.forEach( url => {\n            instances[url] = []\n            for ( const layer of this.instanceRouters[url].stack) { this.summariseRoute(layer, instances[url]) }\n            if ( instances[url].length === 0 ) instances[url] = [{ name: 'No routes' }]\n        })\n\n        if (print) {\n            console.log(' \\n---- Per-Instance User Facing Routes ----')\n\n            Object.keys(this.instanceRouters).forEach( url => {\n                console.log(`>> User Instance Routes ${this.uib.nodeRoot}/${url}/* >>`)\n                console.table(instances[url])\n            })\n\n            // console.log('>> Master Static Folder >>', this.masterStatic)\n        }\n\n        return instances\n    }\n\n    /** Return a summary of all the admin-facing ExpressJS routes (not just uibuilder) & output to console if required\n     * @param {boolean} print If true, output to console\n     * @returns {any} Summary object\n     */\n    dumpAdminRoutes(print = true) {\n        const routes = { 'app': [], 'admin': [], 'v3': [], 'v2': [] }\n\n        // @ts-expect-error\n        for ( const layer of this.RED.httpAdmin._router.stack) { this.summariseRoute(layer, routes.app) }\n        if (this.adminRouter) for ( const layer of this.adminRouter.stack) { this.summariseRoute(layer, routes.admin) }\n        if (this.adminRouterV3) for ( const layer of this.adminRouterV3.stack) { this.summariseRoute(layer, routes.v3) }\n        if (this.adminRouterV2) for ( const layer of this.adminRouterV2.stack) { this.summariseRoute(layer, routes.v2) }\n\n        if (print) {\n            console.log(' \\n---- Admin Facing Routes ----')\n            const adminRoot = this.RED.settings.httpAdminRoot\n\n            console.log(`>> App Admin Routes ${adminRoot}* >>`)\n            console.table(routes.app)\n\n            console.log(`>> Admin uib Routes ${adminRoot}${this.uib.moduleName}/* >>`)\n            console.table(routes.admin)\n\n            console.log(`>> Admin v3 Routes ${adminRoot}${this.uib.moduleName}/admin >>`)\n            console.table(routes.v3)\n\n            console.log(`>> Admin v2 Routes ${adminRoot}${this.uib.moduleName}/ >>`)\n            console.table(routes.v2)\n        }\n\n        return routes\n    }\n\n    /** Return a summary of all the user-facing uibuilder specific ExpressJS routes & output to console if required\n     * @param {boolean} print If true, output to console\n     * @returns {any} Summary object\n     */\n    dumpUserRoutes(print = true) {\n        const routes = { 'app': [], 'uibRouter': [], 'vendorRouter': [] }\n\n        // Get the user-facing routes\n        for ( const layer of this.app._router.stack) { this.summariseRoute(layer, routes.app) }\n        if (this.uibRouter) for ( const layer of this.uibRouter.stack) { this.summariseRoute(layer, routes.uibRouter) }\n        if (this.vendorRouter) for ( const layer of this.vendorRouter.stack) { this.summariseRoute(layer, routes.vendorRouter) }\n\n        if (print) {\n            console.log(' \\n---- User Facing Routes ----')\n\n            console.log(`>> User App Routes ${this.uib.nodeRoot}/* >>`)\n            console.table(routes.app)\n\n            console.log(`>> User uib Routes ${this.uib.nodeRoot}/${this.uib.moduleName}/* >>`)\n            console.table(routes.uibRouter)\n\n            console.log(`>> User vendor Routes ${this.uib.nodeRoot}/${this.uib.moduleName}/vendor/* >>`)\n            console.table(routes.vendorRouter)\n        }\n\n        return routes\n    }\n\n    /** Return a summary of all of the ExpressJS routes and output to console if required\n     * @param {boolean} print If true, output to console\n     * @returns {any} Summary object\n     */\n    dumpRoutes(print = true) {\n        const o = {\n            'user': { 'app': [], 'uibRouter': [], 'vendorRouter': [] },\n            'admin': { 'app': [], 'admin': [], 'v3': [], 'v2': [] },\n            'instances': {}\n        }\n\n        if (print) console.log('\\n \\n[uibuilder:web.js:dumpRoutes] Showing all ExpressJS Routes for uibuilder.\\n')\n\n        // Get the user-facing routes\n        o.user = this.dumpUserRoutes(print)\n\n        // Get each uibuilder instance's routes\n        o.instances = this.dumpInstanceRoutes(print)\n\n        // Get admin-facing routes\n        o.admin = this.dumpAdminRoutes(print)\n\n        if (print) console.log('\\n---- ---- ---- ----\\n \\n')\n\n        return o\n    }\n\n    /** Dump to mylog important ExpressJS properties\n     * @param {object} req Express Request object\n     * @param {object} res Express Response Object\n     */\n    dumpExpressReqAppRes(req, res) { // eslint-disable-line class-methods-use-this\n        const log = mylog\n\n        const r = req\n\n        log('>> REQ >>', {\n            baseUrl: r.baseUrl,\n            body: r.body,\n            cookies: r.cookies,\n            fresh: r.fresh,\n            hostname: r.hostname,\n            httpVersion: r.httpVersion,\n            ip: r.ip, // remote ip of request, proxy dependent\n            ips: r.ips, // list of forwarded ips if proxy set\n            method: r.method,\n            orginalUrl: r.originalUrl,\n            params: r.params,\n            path: r.path,\n            protocol: r.protocol,\n            query: r.query,\n            route: r.route,\n            secure: r.secure,\n            stale: r.stale, // oposite of fresh\n            subdomains: r.subdomains,\n            url: r.url, // from node.js url\n            xhr: r.xhr,\n        })\n        // console.log('>> app >>', {\n        //     locals: r.app.locals\n        // })\n        // const s = res\n        // console.log('>> res >>', {\n        //     headersSent: s.headersSent,\n        //     locals: s.locals,\n        //     headers: s.headers,\n        // })\n    } // --- end of dumpReq --- //\n\n    //#endregion ==== ExpressJS Route Reporting ==== //\n\n    //#region ==== HTML helpers ==== //\n\n    /** Build a raw HTML table from an input\n     * @param {*} input Input object\n     * @param {Array} [cols] List of columns\n     * @returns {string} HTML Table\n     */\n    htmlBuildTable(input, cols) { // eslint-disable-line class-methods-use-this\n\n        if (!cols) {\n            cols = Object.keys(input[0])\n        }\n        let html = '<div class=\"table-responsive\"><table  class=\"uib-info-tb table table-sm\"><thead><tr>'\n\n        const escapeHTML = str => str.replace(/[&<>'\"]/g,\n            tag => ({\n                '&': '&amp;',\n                '<': '&lt;',\n                '>': '&gt;',\n                \"'\": '&#39;', // eslint-disable-line quotes\n                '\"': '&quot;'\n            }[tag])\n        )\n\n        /** The HTML for a single cell\n         * @param {*} col _\n         * @param {*} entry _\n         * @returns {string} HTML for a single cell\n         */\n        function cell(col, entry) { // eslint-disable-line require-jsdoc\n            let html = '<td>'\n            html += entry[col] ? escapeHTML(entry[col]) : ' '\n            html += '</td>'\n            return html\n        }\n\n        // Show the headings\n        cols.forEach( (col) => {\n            html += '<th>'\n            html += col\n            html += '</th>'\n        })\n        html += '</tr></thead>'\n\n        for (const entry of input) {\n            html += '<tr>'\n\n            for (const col of cols) {\n                html += cell(col, entry)\n            }\n\n            html += '</tr>'\n        }\n\n        html += '</table></div>'\n        return html\n    }\n\n    //#endregion ==== HTML helpers ==== //\n\n} // ==== End of Web Class Definition ==== //\n\n/** Singleton model. Only 1 instance of UibWeb should ever exist.\n * Use as: `const web = require('./web.js')`\n */\nconst uiweb = new UibWeb()\nmodule.exports = uiweb\n"],
  "mappings": "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",
  "names": ["path", "fs", "fg", "serveIndex", "express", "tilib", "uiblib", "packageMgt", "socket", "mylog", "defaultPageName", "UibWeb", "#isConfigured", "req", "res", "next", "uib", "RED", "log", "techDocsPath", "err", "add", "key", "e", "page", "url", "data", "title", "descr", "sioPath", "pj", "layer", "i", "aStack", "entry", "uRoutes", "packageName", "pkgDetails", "route", "routes", "node", "rootFolder", "pathRoot", "requestedView", "filePath", "uibMwPath", "uibMiddleware", "mypath", "qSec", "that", "masterMiddleware", "clientId", "customStatic", "customFull", "instanceApiPath", "instanceApi", "keys", "apipath", "fnName", "userDir", "urlPrefix", "urlRoot", "nodeKeys", "ns", "item", "info", "iRoutes", "logUrl", "splitBody", "logLevel", "logTxt", "c", "routeFilePath", "instanceRouteFile", "routeKeys", "routeFnName", "L", "out", "x", "pkgs", "print", "instances", "urls", "adminRoot", "o", "input", "cols", "html", "escapeHTML", "str", "tag", "cell", "col", "uiweb"]
}

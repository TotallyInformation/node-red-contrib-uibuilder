"use strict";const F=require("express"),i=require("path"),d=require("fs-extra"),m=require("fast-glob"),k=require("./uiblib"),$=require("./web"),E=require("./socket"),A=require("../../templates/template_dependencies"),p=F.Router(),f=new Error("uib.rootFolder is null");function R(l){const t={statusMessage:"",status:0};return l.url===void 0?(t.statusMessage="url parameter not provided",t.status=500,t):(l.url=l.url.trim(),l.url.length>20?(t.statusMessage=`url parameter is too long. Max 20 characters: ${l.url}`,t.status=500,t):l.url.length<1?(t.statusMessage="url parameter is empty, please provide a value",t.status=500,t):(l.url.includes("..")&&(t.statusMessage=`url parameter may not contain "..": ${l.url}`,t.status=500),t))}function M(l){const t={statusMessage:"",status:0},n=l.fname;return n===void 0?(t.statusMessage="file name not provided",t.status=500,t):n===""?(t.statusMessage="file name cannot be blank",t.status=500,t):n.length>255?(t.statusMessage=`file name is too long. Max 255 characters: ${l.fname}`,t.status=500,t):(n.includes("..")&&(t.statusMessage=`file name may not contain "..": ${l.fname}`,t.status=500),t)}function g(l){const t={statusMessage:"",status:0},n=l.folder;return n===void 0?(t.statusMessage="folder name not provided",t.status=500,t):n===""?(t.statusMessage="folder name cannot be blank",t.status=500,t):n.length>255?(t.statusMessage=`folder name is too long. Max 255 characters: ${n}`,t.status=500,t):(n.includes("..")&&(t.statusMessage=`folder name may not contain "..": ${n}`,t.status=500),t)}function T(l,t){return p.route("/:url").all(function(n,s,e){const u=s.allparams=Object.assign({},n.query,n.body,n.params);u.type="all";const a=R(u);if(a.status!==0){t.error(`[uibuilder:adminRouterV3:ALL] Admin API. ${a.statusMessage}`),s.statusMessage=a.statusMessage,s.status(a.status).end();return}e()}).get(function(n,s){if(l.rootFolder===null)throw f;const e=s.allparams;switch(e.type="get",e.cmd){case"listall":{t.trace(`[uibuilder:adminRouterV3:GET] Admin API. List all folders and files. url=${e.url}, root fldr=${l.rootFolder}`);const u={root:[]},a=l.rootFolder.replace(/\\/g,"/");m.stream([`${a}/${e.url}/**`,`!${a}/${e.url}/node_modules`,`!${a}/${e.url}/.git`,`!${a}/${e.url}/.vscode`,`!${a}/${e.url}/_*`,`!${a}/${e.url}/**/[_]*`],{dot:!0,onlyFiles:!1,deep:10,followSymbolicLinks:!0,markDirectories:!0}).on("data",r=>{r=r.replace(`${a}/${e.url}/`,"");let o;if(r.endsWith("/"))o=r.slice(0,-1),o===""&&(o="root"),u[o]=[];else{const c=r.split("/"),h=c.pop();o=c.join("/"),o===""&&(o="root");try{u[o].push(h)}catch{}}}).on("end",()=>{s.statusMessage="Folders and Files listed successfully",s.status(200).json(u)});break}case"listfolders":{t.trace(`[uibuilder:adminRouterV3:GET] Admin API. List all folders. url=${e.url}, root fldr=${l.rootFolder}`);const u=[],a=l.rootFolder.replace(/\\/g,"/");m.stream([`${a}/${e.url}/**`,`!${a}/${e.url}/node_modules`,`!${a}/${e.url}/.git`,`!${a}/${e.url}/.vscode`,`!${a}/${e.url}/_*`,`!${a}/${e.url}/**/[_]*`],{dot:!0,onlyFiles:!1,onlyDirectories:!0,deep:10,followSymbolicLinks:!0,markDirectories:!1}).on("data",r=>{r=r.replace(`${a}/${e.url}/`,""),u.push(r)}).on("end",()=>{s.statusMessage="Folders listed successfully",s.status(200).json(u)});break}case"checkurls":{t.trace(`[uibuilder:adminRouterV3:GET:checkurls] Check if URL is already in use. URL: ${e.url}`);const u=Object.values(l.instances).includes(e.url),a=d.existsSync(i.join(l.rootFolder,e.url));s.statusMessage="Instances and Folders checked",s.status(200).json(u||a);break}case"listinstances":{t.trace("[uibuilder:adminRouterV3:GET:listinstances] Returning a list of deployed URLs (instances of uib)."),s.statusMessage="Instances listed",s.status(200).json(l.instances);break}case"listurls":{let u;const a=[];$.app._router.stack.forEach(r=>{if(r.route){const o=r.route.path,c=r.route.methods;a.push({path:o,methods:c})}else r.name==="router"&&r.handle.stack.forEach(function(o){u=o.route,u&&a.push(u)})}),t.trace("[uibuilder:adminRouterV3:GET:listurls] Admin API. List of all user urls in use."),s.statusMessage="URLs listed successfully",s.status(200).json($.app._router.stack);break}case"checkfolder":{t.trace(`[uibuilder:adminRouterV3:GET:checkfolder] See if a node's custom folder exists. URL: ${e.url}`);const u=i.join(l.rootFolder,e.url);d.access(u,d.constants.F_OK).then(()=>(s.statusMessage="Folder checked",s.status(200).json(!0),!0)).catch(()=>(s.statusMessage="Folder checked",s.status(200).json(!1),!1));break}default:break}}).put(function(n,s){if(l.rootFolder===null)throw f;const e=s.allparams;e.type="put";const u=i.join(l.rootFolder,e.url);switch(e.cmd){case"deleteondelete":{t.trace(`[uibuilder:adminRouterV3:PUT:deleteondelete] url=${e.url}`),l.deleteOnDelete[e.url]=!0,s.statusMessage="PUT successful",s.status(200).json({});return}case"updatepackage":{t.trace(`[uibuilder:adminRouterV3:PUT:updatepackage] url=${e.url}`),s.statusMessage="PUT successful",s.status(200).json({newVersion:""});return}}t.trace(`[uibuilder:adminRouterV3:PUT] Unsuccessful. command=${e.cmd}, url=${e.url}`),s.statusMessage="PUT unsuccessful",s.status(500).json({cmd:e.cmd,fullname:u,params:e,message:"PUT unsuccessful"})}).post(function(n,s){if(l.rootFolder===null)throw f;const e=s.allparams;if(e.type="post",e.cmd==="replaceTemplate")k.replaceTemplate(e.url,e.template,e.extTemplate,e.cmd,A,l,t).then(u=>(s.statusMessage=u.statusMessage,u.status===200?s.status(200).json(u.json):s.status(u.status).end(),e.reload==="true"&&E.sendToFe2({_uib:{reload:!0}},e.url),!0)).catch(u=>{let a,r;u.code==="MISSING_REF"?a=`Degit clone error. CHECK External Template Name. Name='${e.extTemplate}', url=${e.url}, cmd=${e.cmd}. ${u.message}`:(e.template==="external"&&(r=`, ${e.extTemplate}`),a=`Replace template error. ${u.message}. url=${e.url}. ${e.template}${r}`),t.error(`[uibuilder:adminapi:POST:replaceTemplate] ${a}`,u),s.statusMessage=a,s.status(500).end()});else{const u=g(e);if(u.status!==0){t.error(`[uibuilder:adminRouterV3:POST] Admin API. ${u.statusMessage}. url=${e.url}`),s.statusMessage=u.statusMessage,s.status(u.status).end();return}if(!(e.cmd&&(e.cmd==="newfolder"||e.cmd==="newfile"))){const r=`cmd parameter not present or wrong value (must be 'newfolder' or 'newfile'). url=${e.url}, cmd=${e.cmd}`;t.error(`[uibuilder:adminRouterV3:POST] Admin API. ${r}`),s.statusMessage=r,s.status(500).end();return}if(e.cmd==="newfile"){const r=M(e);if(r.status!==0){t.error(`[uibuilder:adminRouterV3:POST] Admin API. ${r.statusMessage}. url=${e.url}`),s.statusMessage=r.statusMessage,s.status(r.status).end();return}}e.folder==="root"&&(e.folder="");let a=i.join(l.rootFolder,e.url,e.folder);if(e.cmd==="newfile"&&(a=i.join(a,e.fname)),d.pathExistsSync(a)){const r=`selected ${e.cmd==="newfolder"?"folder":"file"} already exists. url=${e.url}, cmd=${e.cmd}, folder=${e.folder}`;t.error(`[uibuilder:adminRouterV3:POST] Admin API. ${r}`),s.statusMessage=r,s.status(500).end();return}try{e.cmd==="newfolder"?d.ensureDirSync(a):d.ensureFileSync(a)}catch(r){const o=`could not create ${e.cmd==="newfolder"?"folder":"file"}. url=${e.url}, cmd=${e.cmd}, folder=${e.folder}, error=${r.message}`;t.error(`[uibuilder:adminRouterV3:POST] Admin API. ${o}`),s.statusMessage=o,s.status(500).end();return}t.trace(`[uibuilder:adminRouterV3:POST] Admin API. Folder/File create SUCCESS. url=${e.url}, file=${e.folder}/${e.fname}`),s.statusMessage="Folder/File created successfully",s.status(200).json({fullname:a,params:e})}}).delete(function(n,s){if(l.rootFolder===null)throw f;const e=s.allparams;e.type="delete";const u=g(e);if(u.status!==0){t.error(`[uibuilder:adminRouterV3:DELETE] Admin API. ${u.statusMessage}. url=${e.url}`),s.statusMessage=u.statusMessage,s.status(u.status).end();return}if(!(e.cmd&&(e.cmd==="deletefolder"||e.cmd==="deletefile"))){const r=`cmd parameter not present or wrong value (must be 'deletefolder' or 'deletefile'). url=${e.url}, cmd=${e.cmd}`;t.error(`[uibuilder:adminRouterV3:DELETE] Admin API. ${r}`),s.statusMessage=r,s.status(500).end();return}if(e.cmd==="deletefile"){const r=M(e);if(r.status!==0){t.error(`[uibuilder:adminRouterV3:DELETE] Admin API. ${r.statusMessage}. url=${e.url}`),s.statusMessage=r.statusMessage,s.status(r.status).end();return}}e.folder==="root"&&(e.folder="");let a=i.join(l.rootFolder,e.url,e.folder);if(e.cmd==="deletefile"&&(a=i.join(a,e.fname)),!d.pathExistsSync(a)){const r=`selected ${e.cmd==="deletefolder"?"folder":"file"} does not exist. url=${e.url}, cmd=${e.cmd}, folder=${e.folder}`;t.error(`[uibuilder:adminRouterV3:DELETE] Admin API. ${r}`),s.statusMessage=r,s.status(500).end();return}try{d.removeSync(a)}catch(r){const o=`could not delete ${e.cmd==="deletefolder"?"folder":"file"}. url=${e.url}, cmd=${e.cmd}, folder=${e.folder}, error=${r.message}`;t.error(`[uibuilder:adminRouterV3:DELETE] Admin API. ${o}`),s.statusMessage=o,s.status(500).end();return}t.trace(`[uibuilder:adminRouterV3:DELETE] Admin API. Folder/File delete SUCCESS. url=${e.url}, file=${e.folder}/${e.fname}`),s.statusMessage="Folder/File deleted successfully",s.status(200).json({fullname:a,params:e})}),p}module.exports=T;
//# sourceMappingURL=admin-api-v3.js.map

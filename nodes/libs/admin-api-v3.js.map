{
  "version": 3,
  "sources": ["src/libs/admin-api-v3.js"],
  "sourcesContent": ["/** v3 Admin API ExpressJS Router Handler\n *\n * See: https://expressjs.com/en/4x/api.html#router, https://expressjs.com/en/guide/routing.html\n *\n * Copyright (c) 2021-2023 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk, https://github.com/TotallyInformation/node-red-contrib-uibuilder\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict'\n\n/** --- Type Defs ---\n * @typedef {import('../../typedefs.js').uibConfig} uibConfig\n */\n\nconst express = require('express')\nconst path = require('path')\nconst fs = require('fs-extra')  // https://github.com/jprichardson/node-fs-extra#nodejs-fs-extra\nconst fg = require('fast-glob') // https://github.com/mrmlnc/fast-glob\nconst uiblib = require('./uiblib')  // Utility library for uibuilder\nconst web = require('./web')\nconst sockets = require('./socket')\nconst templateConf  = require('../../templates/template_dependencies') // Template configuration metadata\n\nconst v3AdminRouter = express.Router() // eslint-disable-line new-cap\n\nconst errUibRootFldr = new Error('uib.rootFolder is null')\n\n//#region === REST API Validation functions === //\n\n/** Validate url query parameter\n * @param {object} params The GET (res.query) or POST (res.body) parameters\n * @param {string} params.url The uibuilder url to check\n * @returns {{statusMessage: string, status: number}} Status message\n */\nfunction chkParamUrl(params) {\n    const res = { 'statusMessage': '', 'status': 0 }\n\n    // We have to have a url to work with - the url defines the start folder\n    if ( params.url === undefined ) {\n        res.statusMessage = 'url parameter not provided'\n        res.status = 500\n        return res\n    }\n\n    // Trim the url\n    params.url = params.url.trim()\n\n    // URL must not exceed 20 characters\n    if ( params.url.length > 20 ) {\n        res.statusMessage = `url parameter is too long. Max 20 characters: ${params.url}`\n        res.status = 500\n        return res\n    }\n\n    // URL must be more than 0 characters\n    if ( params.url.length < 1 ) {\n        res.statusMessage = 'url parameter is empty, please provide a value'\n        res.status = 500\n        return res\n    }\n\n    // URL cannot contain .. to prevent escaping sub-folder structure\n    if ( params.url.includes('..') ) {\n        res.statusMessage = `url parameter may not contain \"..\": ${params.url}`\n        res.status = 500\n        return res\n    }\n\n    // Actually, since uib auto-creates folder if not exists, this just gets in the way - // Does this url have a matching instance root folder?\n    // if ( ! fs.existsSync(path.join(uib.rootFolder, params.url)) ) {\n    //     res.statusMessage = `url does not have a matching instance root folder. url='${params.url}', Master root folder='${uib.rootFolder}'`\n    //     res.status = 500\n    //     return res\n    // }\n\n    return res\n} // ---- End of fn chkParamUrl ---- //\n\n/** Validate fname (filename) query parameter\n * @param {object} params The GET (res.query) or POST (res.body) parameters\n * @param {string} params.fname The uibuilder url to check\n * @returns {{statusMessage: string, status: number}} Status message\n */\nfunction chkParamFname(params) {\n    const res = { 'statusMessage': '', 'status': 0 }\n    const fname = params.fname\n\n    // We have to have an fname (file name) to work with\n    if ( fname === undefined ) {\n        res.statusMessage = 'file name not provided'\n        res.status = 500\n        return res\n    }\n    // Blank file name probably means no files available so we will ignore\n    if ( fname === '' ) {\n        res.statusMessage = 'file name cannot be blank'\n        res.status = 500\n        return res\n    }\n    // fname must not exceed 255 characters\n    if ( fname.length > 255 ) {\n        res.statusMessage = `file name is too long. Max 255 characters: ${params.fname}`\n        res.status = 500\n        return res\n    }\n    // fname cannot contain .. to prevent escaping sub-folder structure\n    if ( fname.includes('..') ) {\n        res.statusMessage = `file name may not contain \"..\": ${params.fname}`\n        res.status = 500\n        return res\n    }\n\n    return res\n} // ---- End of fn chkParamFname ---- //\n\n/** Validate folder query parameter\n * @param {object} params The GET (res.query) or POST (res.body) parameters\n * @param {string} params.folder The uibuilder url to check\n * @returns {{statusMessage: string, status: number}} Status message\n */\nfunction chkParamFldr(params) {\n    const res = { 'statusMessage': '', 'status': 0 }\n    const folder = params.folder\n\n    // we have to have a folder name\n    if ( folder === undefined ) {\n        res.statusMessage = 'folder name not provided'\n        res.status = 500\n        return res\n    }\n    // folder name must be >0 in length\n    if ( folder === '' ) {\n        res.statusMessage = 'folder name cannot be blank'\n        res.status = 500\n        return res\n    }\n    // folder name must not exceed 255 characters\n    if ( folder.length > 255 ) {\n        res.statusMessage = `folder name is too long. Max 255 characters: ${folder}`\n        res.status = 500\n        return res\n    }\n    // folder name cannot contain .. to prevent escaping sub-folder structure\n    if ( folder.includes('..') ) {\n        res.statusMessage = `folder name may not contain \"..\": ${folder}`\n        res.status = 500\n        return res\n    }\n\n    return res\n} // ---- End of fn chkParamFldr ---- //\n\n//#endregion === End of API validation functions === //\n\n/** Return a router but allow parameters to be passed in\n * @param {uibConfig} uib Reference to uibuilder's master uib object\n * @param {*} log Reference to uibuilder's log functions\n * @returns {express.Router} The v3 admin API ExpressJS router\n */\nfunction adminRouterV3(uib, log) {\n\n    /** uibuilder v3 unified Admin API router - new API commands should be added here\n     * Typical URL is: http://127.0.0.1:1880/red/uibuilder/admin/nodeurl?cmd=listfolders\n     */\n    v3AdminRouter.route('/:url')\n        // For all routes (this function is called before more specific ones)\n        .all(function(/** @type {express.Request} */ req, /** @type {express.Response} */ res, /** @type {express.NextFunction} */ next) {\n            // @ts-ignore\n            const params = res.allparams = Object.assign({}, req.query, req.body, req.params)\n            params.type = 'all'\n            // params.headers = req.headers\n\n            // Validate URL - params.url\n            const chkUrl = chkParamUrl(params)\n            if ( chkUrl.status !== 0 ) {\n                log.error(`[uibuilder:adminRouterV3:ALL] Admin API. ${chkUrl.statusMessage}`)\n                res.statusMessage = chkUrl.statusMessage\n                res.status(chkUrl.status).end()\n                return\n            }\n\n            next()\n        })\n        // Get something and return it\n        .get(function(/** @type {express.Request} */ req, /** @type {express.Response} */ res) {\n            if (uib.rootFolder === null) throw errUibRootFldr\n\n            // @ts-ignore\n            const params = res.allparams\n            params.type = 'get'\n\n            // Commands ...\n            switch (params.cmd) {\n                // List all folders and files for this uibuilder instance\n                case 'listall': {\n                    log.trace(`[uibuilder:adminRouterV3:GET] Admin API. List all folders and files. url=${params.url}, root fldr=${uib.rootFolder}`)\n\n                    // get list of all (sub)folders (follow symlinks as well)\n                    const out = { 'root': [] }\n                    const root2 = uib.rootFolder.replace(/\\\\/g, '/')\n                    fg.stream(\n                        [\n                            // '**',\n                            // '!node_modules',\n                            // '!.git',\n                            // '!.vscode',\n                            // '!_*',\n                            // '!/**/_*/',\n                            `${root2}/${params.url}/**`,\n                            `!${root2}/${params.url}/node_modules`,\n                            `!${root2}/${params.url}/.git`,\n                            `!${root2}/${params.url}/.vscode`,\n                            `!${root2}/${params.url}/_*`,\n                            `!${root2}/${params.url}/**/[_]*`,\n\n                        ],\n                        {\n                            // cwd: `${root2}/${params.url}/`,\n                            dot: true,\n                            onlyFiles: false,\n                            deep: 10,\n                            followSymbolicLinks: true,\n                            markDirectories: true,\n                        }\n                    )\n                        .on('data', entry => {\n                            entry = entry.replace(`${root2}/${params.url}/`, '')\n                            let fldr\n                            if ( entry.endsWith('/') ) {\n                                // remove trailing /\n                                fldr = entry.slice(0, -1)\n                                // For the root folder of the instance, use \"root\" as the name (matches editor processing)\n                                if ( fldr === '' ) fldr = 'root'\n                                out[fldr] = []\n                            } else {\n                                const splitEntry = entry.split('/')\n                                const last = splitEntry.pop()\n                                fldr = splitEntry.join('/')\n                                if ( fldr === '' ) fldr = 'root'\n                                // Wrap in a try because we can't exclude xxx/_yyyy/som.thing and that seems to crash the push.\n                                try {\n                                    out[fldr].push(last)\n                                } catch (e) { /* Nothing needed here */ }\n                            }\n                        })\n                        .on('end', () => {\n                            res.statusMessage = 'Folders and Files listed successfully'\n                            res.status(200).json(out)\n                        })\n\n                    break\n                } // -- end of listall -- //\n\n                // List all folders and files for this uibuilder instance\n                case 'listfolders': {\n                    log.trace(`[uibuilder:adminRouterV3:GET] Admin API. List all folders. url=${params.url}, root fldr=${uib.rootFolder}`)\n\n                    // get list of all (sub)folders (follow symlinks as well)\n                    // const out = { 'root': [] }\n                    const out = []\n                    const root2 = uib.rootFolder.replace(/\\\\/g, '/')\n                    fg.stream(\n                        [\n                            // '**',\n                            // '!node_modules',\n                            // '!.git',\n                            // '!.vscode',\n                            // '!_*',\n                            // '!/**/_*/',\n                            `${root2}/${params.url}/**`,\n                            `!${root2}/${params.url}/node_modules`,\n                            `!${root2}/${params.url}/.git`,\n                            `!${root2}/${params.url}/.vscode`,\n                            `!${root2}/${params.url}/_*`,\n                            `!${root2}/${params.url}/**/[_]*`,\n\n                        ],\n                        {\n                            // cwd: `${root2}/${params.url}/`,\n                            dot: true,\n                            onlyFiles: false,\n                            onlyDirectories: true,\n                            deep: 10,\n                            followSymbolicLinks: true,\n                            markDirectories: false,\n                        }\n                    )\n                        .on('data', entry => {\n                            entry = entry.replace(`${root2}/${params.url}/`, '')\n                            out.push(entry)\n                        })\n                        .on('end', () => {\n                            res.statusMessage = 'Folders listed successfully'\n                            res.status(200).json(out)\n                        })\n\n                    break\n                } // -- end of listfolders -- //\n\n                // Check if URL is already in use\n                case 'checkurls': {\n                    log.trace(`[uibuilder:adminRouterV3:GET:checkurls] Check if URL is already in use. URL: ${params.url}`)\n\n                    /** @returns {boolean} True if the given url exists, else false */\n                    const chkInstances = Object.values(uib.instances).includes(params.url)\n                    const chkFolders = fs.existsSync(path.join(uib.rootFolder, params.url))\n\n                    res.statusMessage = 'Instances and Folders checked'\n                    res.status(200).json( chkInstances || chkFolders )\n\n                    break\n                } // -- end of checkurls -- //\n\n                // List all of the deployed instance urls\n                case 'listinstances': {\n\n                    log.trace('[uibuilder:adminRouterV3:GET:listinstances] Returning a list of deployed URLs (instances of uib).')\n\n                    /** @returns {boolean} True if the given url exists, else false */\n                    // let chkInstances = Object.values(uib.instances).includes(params.url)\n                    // let chkFolders = fs.existsSync(path.join(uib.rootFolder, params.url))\n\n                    res.statusMessage = 'Instances listed'\n                    res.status(200).json( uib.instances )\n\n                    break\n                } // -- end of listinstances -- //\n\n                // Return a list of all user urls in use by ExpressJS\n                case 'listurls': {\n                    // TODO Not currently working\n                    let route\n                    const routes = []\n                    web.app._router.stack.forEach( (middleware) => {\n                        if (middleware.route) { // routes registered directly on the app\n                            const path = middleware.route.path\n                            const methods = middleware.route.methods\n                            routes.push({ path: path, methods: methods })\n                        } else if (middleware.name === 'router') { // router middleware\n                            middleware.handle.stack.forEach(function(handler) {\n                                route = handler.route\n                                route && routes.push(route)\n                            })\n                        }\n                    })\n                    // console.log(web.app._router.stack[0])\n\n                    log.trace('[uibuilder:adminRouterV3:GET:listurls] Admin API. List of all user urls in use.')\n                    res.statusMessage = 'URLs listed successfully'\n                    // res.status(200).json(routes)\n                    res.status(200).json(web.app._router.stack)\n\n                    break\n                } // -- end of listurls -- //\n\n                // See if a node's custom folder exists. Return true if it does, else false\n                case 'checkfolder': {\n                    log.trace(`[uibuilder:adminRouterV3:GET:checkfolder] See if a node's custom folder exists. URL: ${params.url}`)\n\n                    const folder = path.join( uib.rootFolder, params.url)\n\n                    fs.access(folder, fs.constants.F_OK)\n                        .then( () => {\n                            res.statusMessage = 'Folder checked'\n                            res.status(200).json( true )\n                            return true\n                        })\n                        .catch( () => { // err) => {\n                            res.statusMessage = 'Folder checked'\n                            res.status(200).json( false )\n                            return false\n                        })\n\n                    break\n                } // -- end of checkfolder -- //\n\n                default: {\n                    break\n                }\n            }\n        })\n\n        // TODO Write file contents\n        .put(function(/** @type {express.Request} */ req, /** @type {express.Response} */ res) {\n            if (uib.rootFolder === null) throw errUibRootFldr\n\n            // @ts-expect-error\n            const params = res.allparams\n            params.type = 'put'\n\n            const fullname = path.join(uib.rootFolder, params.url)\n\n            // Commands ...\n            switch (params.cmd) {\n                // Tell uibuilder to delete the instance local folder when this instance is deleted - see html file oneditdelete & uiblib.processClose\n                case 'deleteondelete': {\n                    log.trace(`[uibuilder:adminRouterV3:PUT:deleteondelete] url=${params.url}`)\n                    uib.deleteOnDelete[params.url] = true\n                    res.statusMessage = 'PUT successful'\n                    res.status(200).json({})\n                    return\n                }\n\n                case 'updatepackage': {\n                    log.trace(`[uibuilder:adminRouterV3:PUT:updatepackage] url=${params.url}`)\n                    // console.log(`[uibuilder:adminRouterV3:PUT:updatepackage] url=${params.url}, pkg=${params.pkgName}`)\n\n                    res.statusMessage = 'PUT successful'\n                    res.status(200).json({\n                        newVersion: ''\n                    })\n                    return\n                }\n            }\n\n            // If we get here, we've failed\n            log.trace(`[uibuilder:adminRouterV3:PUT] Unsuccessful. command=${params.cmd}, url=${params.url}`)\n            res.statusMessage = 'PUT unsuccessful'\n            res.status(500).json({\n                'cmd': params.cmd,\n                'fullname': fullname,\n                'params': params,\n                'message': 'PUT unsuccessful',\n            })\n\n        })\n\n        // Load new template or Create a new folder or file\n        .post(function(/** @type {express.Request} */ req, /** @type {express.Response} */ res) {\n            if (uib.rootFolder === null) throw errUibRootFldr\n\n            // @ts-ignore\n            const params = res.allparams\n            params.type = 'post'\n\n            if ( params.cmd === 'replaceTemplate' ) {\n\n                uiblib.replaceTemplate(params.url, params.template, params.extTemplate, params.cmd, templateConf, uib, log)\n                    .then( resp => {\n                        res.statusMessage = resp.statusMessage\n                        if ( resp.status === 200 ) res.status(200).json(resp.json)\n                        else res.status(resp.status).end()\n                        // Reload connected clients if required by sending them a reload msg\n                        if ( params.reload === 'true' ) {\n                            sockets.sendToFe2({\n                                '_uib': {\n                                    'reload': true,\n                                }\n                            }, params.url)\n                        }\n                        return true\n                    })\n                    .catch( err => {\n                        let statusMsg, mystr\n                        if ( err.code === 'MISSING_REF' ) {\n                            statusMsg = `Degit clone error. CHECK External Template Name. Name='${params.extTemplate}', url=${params.url}, cmd=${params.cmd}. ${err.message}`\n                        } else {\n                            if ( params.template === 'external' ) mystr = `, ${params.extTemplate}`\n                            statusMsg = `Replace template error. ${err.message}. url=${params.url}. ${params.template}${mystr}`\n                        }\n                        log.error(`[uibuilder:adminapi:POST:replaceTemplate] ${statusMsg}`, err)\n                        res.statusMessage = statusMsg\n                        res.status(500).end()\n                    } )\n\n            } else {\n\n                // Validate folder name - params.folder\n                const chkFldr = chkParamFldr(params)\n                if ( chkFldr.status !== 0 ) {\n                    log.error(`[uibuilder:adminRouterV3:POST] Admin API. ${chkFldr.statusMessage}. url=${params.url}`)\n                    res.statusMessage = chkFldr.statusMessage\n                    res.status(chkFldr.status).end()\n                    return\n                }\n                // Validate command - must be present and either be 'newfolder' or 'newfile'\n                if ( !(params.cmd && (params.cmd === 'newfolder' || params.cmd === 'newfile')) ) {\n                    const statusMsg = `cmd parameter not present or wrong value (must be 'newfolder' or 'newfile'). url=${params.url}, cmd=${params.cmd}`\n                    log.error(`[uibuilder:adminRouterV3:POST] Admin API. ${statusMsg}`)\n                    res.statusMessage = statusMsg\n                    res.status(500).end()\n                    return\n                }\n                // If newfile, validate file name - params.fname\n                if (params.cmd === 'newfile' ) {\n                    const chkFname = chkParamFname(params)\n                    if ( chkFname.status !== 0 ) {\n                        log.error(`[uibuilder:adminRouterV3:POST] Admin API. ${chkFname.statusMessage}. url=${params.url}`)\n                        res.statusMessage = chkFname.statusMessage\n                        res.status(chkFname.status).end()\n                        return\n                    }\n                }\n\n                // Fix for Issue #155 - if fldr = root, no folder\n                if ( params.folder === 'root' ) params.folder = ''\n\n                let fullname = path.join(uib.rootFolder, params.url, params.folder)\n                if (params.cmd === 'newfile' ) {\n                    fullname = path.join(fullname, params.fname)\n                }\n\n                // Does folder or file already exist? If so, return error\n                if ( fs.pathExistsSync(fullname) ) {\n                    const statusMsg = `selected ${params.cmd === 'newfolder' ? 'folder' : 'file'} already exists. url=${params.url}, cmd=${params.cmd}, folder=${params.folder}`\n                    log.error(`[uibuilder:adminRouterV3:POST] Admin API. ${statusMsg}`)\n                    res.statusMessage = statusMsg\n                    res.status(500).end()\n                    return\n                }\n\n                // try to create folder/file - if fail, return error\n                try {\n                    if ( params.cmd === 'newfolder') {\n                        fs.ensureDirSync(fullname)\n                    } else {\n                        fs.ensureFileSync(fullname)\n                    }\n                } catch (e) {\n                    const statusMsg = `could not create ${params.cmd === 'newfolder' ? 'folder' : 'file'}. url=${params.url}, cmd=${params.cmd}, folder=${params.folder}, error=${e.message}`\n                    log.error(`[uibuilder:adminRouterV3:POST] Admin API. ${statusMsg}`)\n                    res.statusMessage = statusMsg\n                    res.status(500).end()\n                    return\n                }\n\n                log.trace(`[uibuilder:adminRouterV3:POST] Admin API. Folder/File create SUCCESS. url=${params.url}, file=${params.folder}/${params.fname}`)\n                res.statusMessage = 'Folder/File created successfully'\n                res.status(200).json({\n                    'fullname': fullname,\n                    'params': params,\n                })\n\n            } // end of else\n\n        }) // --- End of POST processing --- //\n\n        // Delete a folder or a file\n        .delete(function(/** @type {express.Request} */ req, /** @type {express.Response} */ res) {\n            if (uib.rootFolder === null) throw errUibRootFldr\n\n            // @ts-ignore ts(2339)\n            const params = res.allparams\n            params.type = 'delete'\n\n            // Several command options available: deletefolder, deletefile\n\n            // deletefolder or deletefile:\n\n            // Validate folder name - params.folder\n            const chkFldr = chkParamFldr(params)\n            if ( chkFldr.status !== 0 ) {\n                log.error(`[uibuilder:adminRouterV3:DELETE] Admin API. ${chkFldr.statusMessage}. url=${params.url}`)\n                res.statusMessage = chkFldr.statusMessage\n                res.status(chkFldr.status).end()\n                return\n            }\n            // Validate command - must be present and either be 'deletefolder' or 'deletefile'\n            if ( !(params.cmd && (params.cmd === 'deletefolder' || params.cmd === 'deletefile')) ) {\n                const statusMsg = `cmd parameter not present or wrong value (must be 'deletefolder' or 'deletefile'). url=${params.url}, cmd=${params.cmd}`\n                log.error(`[uibuilder:adminRouterV3:DELETE] Admin API. ${statusMsg}`)\n                res.statusMessage = statusMsg\n                res.status(500).end()\n                return\n            }\n            // If newfile, validate file name - params.fname\n            if (params.cmd === 'deletefile' ) {\n                const chkFname = chkParamFname(params)\n                if ( chkFname.status !== 0 ) {\n                    log.error(`[uibuilder:adminRouterV3:DELETE] Admin API. ${chkFname.statusMessage}. url=${params.url}`)\n                    res.statusMessage = chkFname.statusMessage\n                    res.status(chkFname.status).end()\n                    return\n                }\n            }\n\n            // Fix for Issue #155 - if fldr = root, no folder\n            if ( params.folder === 'root' ) params.folder = ''\n\n            let fullname = path.join(uib.rootFolder, params.url, params.folder)\n            if (params.cmd === 'deletefile' ) {\n                fullname = path.join(fullname, params.fname)\n            }\n\n            // Does folder or file does not exist? Return error\n            if ( !fs.pathExistsSync(fullname) ) {\n                const statusMsg = `selected ${params.cmd === 'deletefolder' ? 'folder' : 'file'} does not exist. url=${params.url}, cmd=${params.cmd}, folder=${params.folder}`\n                log.error(`[uibuilder:adminRouterV3:DELETE] Admin API. ${statusMsg}`)\n                res.statusMessage = statusMsg\n                res.status(500).end()\n                return\n            }\n\n            // try to create folder/file - if fail, return error\n            try {\n                fs.removeSync(fullname)  // deletes both files and folders\n            } catch (e) {\n                const statusMsg = `could not delete ${params.cmd === 'deletefolder' ? 'folder' : 'file'}. url=${params.url}, cmd=${params.cmd}, folder=${params.folder}, error=${e.message}`\n                log.error(`[uibuilder:adminRouterV3:DELETE] Admin API. ${statusMsg}`)\n                res.statusMessage = statusMsg\n                res.status(500).end()\n                return\n            }\n\n            log.trace(`[uibuilder:adminRouterV3:DELETE] Admin API. Folder/File delete SUCCESS. url=${params.url}, file=${params.folder}/${params.fname}`)\n            res.statusMessage = 'Folder/File deleted successfully'\n            res.status(200).json({\n                'fullname': fullname,\n                'params': params,\n            })\n        })\n\n    /** @see https://expressjs.com/en/4x/api.html#app.METHOD for other methods\n     *  patch, report, search ?\n     */\n\n    return v3AdminRouter\n}\n\nmodule.exports = adminRouterV3\n\n// EOF\n"],
  "mappings": "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",
  "names": ["express", "path", "fs", "fg", "uiblib", "web", "sockets", "templateConf", "v3AdminRouter", "errUibRootFldr", "chkParamUrl", "params", "res", "chkParamFname", "fname", "chkParamFldr", "folder", "adminRouterV3", "uib", "log", "req", "next", "chkUrl", "out", "root2", "entry", "fldr", "splitEntry", "last", "chkInstances", "chkFolders", "route", "routes", "middleware", "methods", "handler", "fullname", "resp", "err", "statusMsg", "mystr", "chkFldr", "chkFname", "e"]
}
